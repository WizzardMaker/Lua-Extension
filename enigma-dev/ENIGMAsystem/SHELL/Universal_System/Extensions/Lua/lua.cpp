#include "include.h"
#include <string>
using std::string;
lua::State state;
string path;
namespace enigma_user{
	//These following functions are needed because LuaState does not accept variant variables
	//And thanks to the parser LGM does not know about those overloads
	void draw_text(gs_scalar x, gs_scalar y, string str){
		extern void draw_text(gs_scalar x, gs_scalar y, variant str);
		draw_text(x, y, str);
	}
	void draw_text_skewed(gs_scalar x, gs_scalar y, string str, gs_scalar top, gs_scalar bottom){
		extern void draw_text_skewed(gs_scalar x, gs_scalar y, variant str, gs_scalar top, gs_scalar bottom);
		draw_text_skewed(x,  y,  str,  top,  bottom);
	}
	void draw_text_color(gs_scalar x, gs_scalar y, string str, int c1, int c2, int c3, int c4, gs_scalar a){
		extern void draw_text_color(gs_scalar x, gs_scalar y, variant str, int c1, int c2, int c3, int c4, gs_scalar a);
		draw_text_color( x,  y,  str,  c1,  c2,  c3,  c4,  a);
	}
	void draw_text_sprite(gs_scalar x, gs_scalar y, string vstr, int sep, int lineWidth, int sprite, int firstChar, int scale){
		extern void draw_text_sprite(gs_scalar x, gs_scalar y, variant vstr, int sep, int lineWidth, int sprite, int firstChar, int scale);
		draw_text_sprite( x,  y,  vstr,  sep,  lineWidth,  sprite,  firstChar,  scale);
	}
	void draw_text_ext(gs_scalar x, gs_scalar y, string str, gs_scalar sep, gs_scalar wid){
		extern void draw_text_ext(gs_scalar x, gs_scalar y, variant str, gs_scalar sep, gs_scalar wid);
		draw_text_ext( x,  y,  str,  sep,  wid);

	}
	void draw_text_ext_color(gs_scalar x, gs_scalar y, string str, gs_scalar sep, gs_scalar wid, int c1, int c2, int c3, int c4, gs_scalar a){
		extern void draw_text_ext_color(gs_scalar x, gs_scalar y, variant str, gs_scalar sep, gs_scalar wid, int c1, int c2, int c3, int c4, gs_scalar a);
		draw_text_ext_color( x,  y,  str,  sep,  wid,  c1,  c2,  c3,  c4,  a);
	}
	void draw_text_transformed(gs_scalar x, gs_scalar y, string str, gs_scalar xscale, gs_scalar yscale, double rot){
		extern void draw_text_transformed(gs_scalar x, gs_scalar y, variant str, gs_scalar xscale, gs_scalar yscale, double rot);
		draw_text_transformed( x,  y,  str,  xscale,  yscale,  rot);
	}
	void draw_text_transformed_color(gs_scalar x, gs_scalar y, string str, gs_scalar xscale, gs_scalar yscale, double rot, int c1, int c2, int c3, int c4, gs_scalar a){
		extern void draw_text_transformed_color(gs_scalar x, gs_scalar y, variant str, gs_scalar xscale, gs_scalar yscale, double rot, int c1, int c2, int c3, int c4, gs_scalar a);
		draw_text_transformed_color( x,  y,  str,  xscale,  yscale,  rot,  c1,  c2,  c3,  c4,  a);

	}
	void draw_text_ext_transformed(gs_scalar x, gs_scalar y, string str, gs_scalar sep, gs_scalar wid, gs_scalar xscale, gs_scalar yscale, double rot){
		extern void draw_text_ext_transformed(gs_scalar x, gs_scalar y, variant str, gs_scalar sep, gs_scalar wid, gs_scalar xscale, gs_scalar yscale, double rot);
		draw_text_ext_transformed( x,  y,  str,  sep,  wid,  xscale,  yscale,  rot);

	}
	void draw_text_ext_transformed_color(gs_scalar x, gs_scalar y, string str, gs_scalar sep, gs_scalar wid, gs_scalar xscale, gs_scalar yscale, double rot, int c1, int c2, int c3, int c4, gs_scalar a){
		extern void draw_text_ext_transformed_color(gs_scalar x, gs_scalar y, variant str, gs_scalar sep, gs_scalar wid, gs_scalar xscale, gs_scalar yscale, double rot, int c1, int c2, int c3, int c4, gs_scalar a);
		draw_text_ext_transformed_color( x,  y,  str,  sep,  wid,  xscale,  yscale,  rot,  c1,  c2,  c3,  c4,  a);
	}
	unsigned int string_width(string str){
		extern unsigned int string_width(variant str);	
		return string_width(str);
	}
	unsigned int string_height(string str){
		extern unsigned int string_height(variant str);
		return string_height(str);
	}
	
	void lua_start(string filepath){
		state.initialize(true);
		extern bool audio_exists(int index);
		state.set( "audio_exists" , &audio_exists );
		extern bool audio_is_playing(int index);
		state.set( "audio_is_playing" , &audio_is_playing );
		extern bool audio_is_paused(int index);
		state.set( "audio_is_paused" , &audio_is_paused );
		extern int audio_play_sound(int index, double priority, bool loop);
		state.set( "audio_play_sound" , &audio_play_sound );
		extern int audio_play_sound_at(int index, as_scalar x, as_scalar y, as_scalar z, as_scalar falloff_ref, as_scalar falloff_max, as_scalar falloff_factor, bool loop, double priority);
		state.set( "audio_play_sound_at" , &audio_play_sound_at );
		extern int audio_play_sound_on(int emitter, int sound, bool loop, double priority);
		state.set( "audio_play_sound_on" , &audio_play_sound_on );
		extern void audio_pause_sound(int index);
		state.set( "audio_pause_sound" , &audio_pause_sound );
		extern void audio_resume_sound(int index);
		state.set( "audio_resume_sound" , &audio_resume_sound );
		extern void audio_stop_sound(int index);
		state.set( "audio_stop_sound" , &audio_stop_sound );
		extern void audio_pause_all();
		state.set( "audio_pause_all" , &audio_pause_all );
		extern void audio_resume_all();
		state.set( "audio_resume_all" , &audio_resume_all );
		extern void audio_stop_all();
		state.set( "audio_stop_all" , &audio_stop_all );
		extern void audio_sound_seek(int index, double offset);
		state.set( "audio_sound_seek" , &audio_sound_seek );
		extern double audio_sound_offset(int index);
		state.set( "audio_sound_offset" , &audio_sound_offset );
		extern void audio_listener_orientation(as_scalar lookat_x, as_scalar lookat_y, as_scalar lookat_z, as_scalar up_x, as_scalar up_y, as_scalar up_z);
		state.set( "audio_listener_orientation" , &audio_listener_orientation );
		extern void audio_listener_position(as_scalar x, as_scalar y, as_scalar z);
		state.set( "audio_listener_position" , &audio_listener_position );
		extern void audio_listener_velocity(as_scalar vx, as_scalar vy, as_scalar vz);
		state.set( "audio_listener_velocity" , &audio_listener_velocity );
		extern int audio_sound_length(int index);
		state.set( "audio_sound_length" , &audio_sound_length );
		extern void audio_sound_pitch(int index, float pitch);
		state.set( "audio_sound_pitch" , &audio_sound_pitch );
		extern void audio_sound_gain(int index, float volume, double time);
		state.set( "audio_sound_gain" , &audio_sound_gain );
		extern void audio_master_gain(float volume, double time);
		state.set( "audio_master_gain" , &audio_master_gain );
		extern void audio_channel_num(int num);
		state.set( "audio_channel_num" , &audio_channel_num );
		extern int audio_system();
		state.set( "audio_system" , &audio_system );
		extern int audio_add(string fname);
		state.set( "audio_add" , &audio_add );
		extern void audio_delete(int index);
		state.set( "audio_delete" , &audio_delete );
		extern void audio_falloff_set_model(int model);
		state.set( "audio_falloff_set_model" , &audio_falloff_set_model );
		extern int audio_emitter_create();
		state.set( "audio_emitter_create" , &audio_emitter_create );
		extern bool audio_emitter_exists(int index);
		state.set( "audio_emitter_exists" , &audio_emitter_exists );
		extern void audio_emitter_falloff(int emitter, as_scalar falloff_ref, as_scalar falloff_max, as_scalar falloff_factor);
		state.set( "audio_emitter_falloff" , &audio_emitter_falloff );
		extern void audio_emitter_free(int emitter);
		state.set( "audio_emitter_free" , &audio_emitter_free );
		extern void audio_emitter_gain(int emitter, double gain);
		state.set( "audio_emitter_gain" , &audio_emitter_gain );
		extern void audio_emitter_pitch(int emitter, double pitch);
		state.set( "audio_emitter_pitch" , &audio_emitter_pitch );
		extern void audio_emitter_position(int emitter, as_scalar x, as_scalar y, as_scalar z);
		state.set( "audio_emitter_position" , &audio_emitter_position );
		extern void audio_emitter_velocity(int emitter, as_scalar vx, as_scalar vy, as_scalar vz);
		state.set( "audio_emitter_velocity" , &audio_emitter_velocity );
		extern bool sound_exists(int sound);
		state.set( "sound_exists" , &sound_exists );
		extern bool sound_play(int sound);
		state.set( "sound_play" , &sound_play );
		extern bool sound_loop(int sound);
		state.set( "sound_loop" , &sound_loop );
		extern void sound_stop(int sound);
		state.set( "sound_stop" , &sound_stop );
		extern void sound_stop_all();
		state.set( "sound_stop_all" , &sound_stop_all );
		extern void sound_delete(int sound);
		state.set( "sound_delete" , &sound_delete );
		extern bool sound_pause(int sound);
		state.set( "sound_pause" , &sound_pause );
		extern void sound_pause_all();
		state.set( "sound_pause_all" , &sound_pause_all );
		extern bool sound_resume(int sound);
		state.set( "sound_resume" , &sound_resume );
		extern void sound_resume_all();
		state.set( "sound_resume_all" , &sound_resume_all );
		//extern float sound_get_pan(int sound);
		//state.set( "sound_get_pan" , &sound_get_pan );
		//extern float sound_get_volume(int sound);
		//state.set( "sound_get_volume" , &sound_get_volume );
		extern float sound_get_length(int sound);
		state.set( "sound_get_length" , &sound_get_length );
		extern float sound_get_position(int sound);
		state.set( "sound_get_position" , &sound_get_position );
		extern void sound_seek(int sound, float position);
		state.set( "sound_seek" , &sound_seek );
		extern void sound_seek_all(float position);
		state.set( "sound_seek_all" , &sound_seek_all );
		extern bool sound_isplaying(int sound);
		state.set( "sound_isplaying" , &sound_isplaying );
		extern bool sound_ispaused(int sound);
		state.set( "sound_ispaused" , &sound_ispaused );
		extern void action_sound(int snd, bool loop);
		state.set( "action_sound" , &action_sound );
		extern int sound_add(string fname, int kind, bool preload);
		state.set( "sound_add" , &sound_add );
		extern bool sound_replace(int sound, string fname, int kind, bool preload);
		state.set( "sound_replace" , &sound_replace );
		//extern const char* sound_get_audio_error();
		//state.set( "sound_get_audio_error" , &sound_get_audio_error );
		extern void sound_pan(int sound, float value);
		state.set( "sound_pan" , &sound_pan );
		extern void sound_pitch(int sound, float value);
		state.set( "sound_pitch" , &sound_pitch );
		extern void sound_volume(int sound, float value);
		state.set( "sound_volume" , &sound_volume );
		extern void sound_global_volume(float mastervolume);
		state.set( "sound_global_volume" , &sound_global_volume );
		extern void sound_3d_set_sound_cone(int snd, float x, float y, float z, double anglein, double angleout, long voloutside);
		state.set( "sound_3d_set_sound_cone" , &sound_3d_set_sound_cone );
		extern void sound_3d_set_sound_distance(int snd, float mindist, float maxdist);
		state.set( "sound_3d_set_sound_distance" , &sound_3d_set_sound_distance );
		extern void sound_3d_set_sound_position(int snd, float x, float y, float z);
		state.set( "sound_3d_set_sound_position" , &sound_3d_set_sound_position );
		extern void sound_3d_set_sound_velocity(int snd, float x, float y, float z);
		state.set( "sound_3d_set_sound_velocity" , &sound_3d_set_sound_velocity );
		extern void sound_effect_chorus(int snd, float wetdry, float depth, float feedback, float frequency, long wave, float delay, long phase);
		state.set( "sound_effect_chorus" , &sound_effect_chorus );
		extern void sound_effect_compressor(int snd, float gain, float attack, float release, float threshold, float ratio, float delay);
		state.set( "sound_effect_compressor" , &sound_effect_compressor );
		extern void sound_effect_echo(int snd, float wetdry, float feedback, float leftdelay, float rightdelay, long pandelay);
		state.set( "sound_effect_echo" , &sound_effect_echo );
		extern void sound_effect_equalizer(int snd, float center, float bandwidth, float gain);
		state.set( "sound_effect_equalizer" , &sound_effect_equalizer );
		extern void sound_effect_flanger(int snd, float wetdry, float depth, float feedback, float frequency, long wave, float delay, long phase);
		state.set( "sound_effect_flanger" , &sound_effect_flanger );
		extern void sound_effect_gargle(int snd, unsigned rate, unsigned wave);
		state.set( "sound_effect_gargle" , &sound_effect_gargle );
		extern void sound_effect_reverb(int snd, float gain, float mix, float time, float ratio);
		state.set( "sound_effect_reverb" , &sound_effect_reverb );
		extern void sound_effect_set(int snd, int effect);
		state.set( "sound_effect_set" , &sound_effect_set );
		extern bool place_free(cs_scalar x, cs_scalar y);
		state.set( "place_free" , &place_free );
		extern bool place_empty(cs_scalar x, cs_scalar y);
		state.set( "place_empty" , &place_empty );
		extern bool place_meeting(cs_scalar x, cs_scalar y, int object);
		state.set( "place_meeting" , &place_meeting );
		extern void position_change(cs_scalar x1, cs_scalar y1, int obj, bool perf);
		state.set( "position_change" , &position_change );
		extern bool position_free(cs_scalar x, cs_scalar y);
		state.set( "position_free" , &position_free );
		extern bool position_empty(cs_scalar x, cs_scalar y);
		state.set( "position_empty" , &position_empty );
		extern bool position_meeting(cs_scalar x, cs_scalar y, int object);
		state.set( "position_meeting" , &position_meeting );
		extern void position_destroy_solid(cs_scalar x, cs_scalar y);
		state.set( "position_destroy_solid" , &position_destroy_solid );
		extern void position_destroy(cs_scalar x, cs_scalar y);
		state.set( "position_destroy" , &position_destroy );
		extern enigma::instance_t instance_place(cs_scalar x, cs_scalar y, int object);
		state.set( "instance_place" , &instance_place );
		extern enigma::instance_t instance_position(cs_scalar x, cs_scalar y, int object);
		state.set( "instance_position" , &instance_position );
		extern double distance_to_object(int object);
		state.set( "distance_to_object" , &distance_to_object );
		extern double distance_to_point(cs_scalar x, cs_scalar y);
		state.set( "distance_to_point" , &distance_to_point );
		extern string draw_get_graphics_error();
		state.set( "draw_get_graphics_error" , &draw_get_graphics_error );
		extern void screen_refresh();
		state.set( "screen_refresh" , &screen_refresh );
		extern void screen_redraw();
		state.set( "screen_redraw" , &screen_redraw );
		extern void screen_init();
		state.set( "screen_init" , &screen_init );
		extern int background_get_width(int backId);
		state.set( "background_get_width" , &background_get_width );
		extern int background_get_height(int backId);
		state.set( "background_get_height" , &background_get_height );
		//extern void texture_set_interpolation(bool enable);
		//state.set( "texture_set_interpolation" , &texture_set_interpolation );
		extern void texture_set_interpolation_ext(int sampler, bool enable);
		state.set( "texture_set_interpolation_ext" , &texture_set_interpolation_ext );
		/*extern int hlsl_shader_create(int type);
		state.set( "hlsl_shader_create" , &hlsl_shader_create );
		extern int hlsl_shader_load(int id, string fname);
		state.set( "hlsl_shader_load" , &hlsl_shader_load );
		//extern void hlsl_shader_set_constantf(int id, unsigned start, const float* data, unsigned count);
		//state.set( "hlsl_shader_set_constantf" , &hlsl_shader_set_constantf );
		extern void hlsl_shader_set_vector(int id, string name, gs_scalar x, gs_scalar y, gs_scalar z, gs_scalar w);
		state.set( "hlsl_shader_set_vector" , &hlsl_shader_set_vector );
		extern void hlsl_shader_use(int id);
		state.set( "hlsl_shader_use" , &hlsl_shader_use );
		extern void hlsl_shader_reset();
		state.set( "hlsl_shader_reset" , &hlsl_shader_reset );
		extern void hlsl_shader_free(int id);
		state.set( "hlsl_shader_free" , &hlsl_shader_free );
		extern int hlsl_shader_create(int type);
		state.set( "hlsl_shader_create" , &hlsl_shader_create );
		extern int hlsl_shader_load(int id, string fname);
		state.set( "hlsl_shader_load" , &hlsl_shader_load );
		//extern void hlsl_shader_set_constantf(int id, unsigned start, const float* data, unsigned count);
		//state.set( "hlsl_shader_set_constantf" , &hlsl_shader_set_constantf );
		extern void hlsl_shader_set_vector(int id, string name, gs_scalar x, gs_scalar y, gs_scalar z, gs_scalar w);
		state.set( "hlsl_shader_set_vector" , &hlsl_shader_set_vector );
		extern void hlsl_shader_use(int id);
		state.set( "hlsl_shader_use" , &hlsl_shader_use );
		extern void hlsl_shader_reset();
		state.set( "hlsl_shader_reset" , &hlsl_shader_reset );
		extern void hlsl_shader_free(int id);
		state.set( "hlsl_shader_free" , &hlsl_shader_free );*/
		extern void action_draw_health(const gs_scalar x1, const gs_scalar y1, const gs_scalar x2, const gs_scalar y2, const double backColor, const int barColor);
		state.set( "action_draw_health" , &action_draw_health );
		extern double background_get_texture_width_factor(int backId);
		state.set( "background_get_texture_width_factor" , &background_get_texture_width_factor );
		extern double background_get_texture_height_factor(int backId);
		state.set( "background_get_texture_height_factor" , &background_get_texture_height_factor );
		extern void draw_background_stretched_ext(int back, gs_scalar x, gs_scalar y, gs_scalar wid, gs_scalar hei, int color, gs_scalar alpha);
		state.set( "draw_background_stretched_ext" , &draw_background_stretched_ext );
		extern void draw_background_general(int back, gs_scalar left, gs_scalar top, gs_scalar wid, gs_scalar hei, gs_scalar x, gs_scalar y, gs_scalar xscale, gs_scalar yscale, double rot, int c1, int c2, int c3, int c4, gs_scalar alpha);
		state.set( "draw_background_general" , &draw_background_general );
		extern int draw_set_blend_mode(int mode);
		state.set( "draw_set_blend_mode" , &draw_set_blend_mode );
		extern int draw_set_blend_mode_ext(int src,int dest);
		state.set( "draw_set_blend_mode_ext" , &draw_set_blend_mode_ext );
		extern int draw_get_blend_mode();
		state.set( "draw_get_blend_mode" , &draw_get_blend_mode );
		extern int draw_get_blend_mode_ext(bool src);
		state.set( "draw_get_blend_mode_ext" , &draw_get_blend_mode_ext );
		extern int draw_get_blend_mode_type();
		state.set( "draw_get_blend_mode_type" , &draw_get_blend_mode_type );
		extern void draw_clear(int color);
		state.set( "draw_clear" , &draw_clear );
		extern void draw_clear_alpha(int color, float alpha);
		state.set( "draw_clear_alpha" , &draw_clear_alpha );
		extern int merge_color(int col1, int col2, double amount);
		state.set( "merge_color" , &merge_color );
		extern void draw_set_color(int col);
		state.set( "draw_set_color" , &draw_set_color );
		extern void draw_set_color_rgb(unsigned char red, unsigned char green, unsigned char blue);
		state.set( "draw_set_color_rgb" , &draw_set_color_rgb );
		extern void draw_set_alpha(float alpha);
		state.set( "draw_set_alpha" , &draw_set_alpha );
		extern void draw_set_color_rgba(unsigned char red, unsigned char green, unsigned char blue, float alpha);
		state.set( "draw_set_color_rgba" , &draw_set_color_rgba );
		extern void draw_set_color_write_enable(bool red, bool green, bool blue, bool alpha);
		state.set( "draw_set_color_write_enable" , &draw_set_color_write_enable );
		extern int draw_get_color();
		state.set( "draw_get_color" , &draw_get_color );
		extern int draw_get_red();
		state.set( "draw_get_red" , &draw_get_red );
		extern int draw_get_green();
		state.set( "draw_get_green" , &draw_get_green );
		extern int draw_get_blue();
		state.set( "draw_get_blue" , &draw_get_blue );
		extern float draw_get_alpha();
		state.set( "draw_get_alpha" , &draw_get_alpha );
		extern int make_color_rgb(unsigned char red, unsigned char green, unsigned char blue);
		state.set( "make_color_rgb" , &make_color_rgb );
		extern int make_color_rgba(unsigned char red, unsigned char green, unsigned char blue, unsigned char alpha);
		state.set( "make_color_rgba" , &make_color_rgba );
		extern int color_get_red(int color);
		state.set( "color_get_red" , &color_get_red );
		extern int color_get_green(int color);
		state.set( "color_get_green" , &color_get_green );
		extern int color_get_blue(int color);
		state.set( "color_get_blue" , &color_get_blue );
		extern int color_get_hue(int color);
		state.set( "color_get_hue" , &color_get_hue );
		extern int color_get_value(int color);
		state.set( "color_get_value" , &color_get_value );
		extern int color_get_saturation(int color);
		state.set( "color_get_saturation" , &color_get_saturation );
		extern int make_color_hsv(int hue,int saturation,int value);
		state.set( "make_color_hsv" , &make_color_hsv );
		extern void draw_bezier_quadratic(gs_scalar x1, gs_scalar y1,gs_scalar x2, gs_scalar y2,gs_scalar x3, gs_scalar y3);
		state.set( "draw_bezier_quadratic" , &draw_bezier_quadratic );
		extern void draw_bezier_quadratic_color(gs_scalar x1, gs_scalar y1,gs_scalar x2, gs_scalar y2,gs_scalar x3, gs_scalar y3,int c1,int c2,gs_scalar a1,gs_scalar a2);
		state.set( "draw_bezier_quadratic_color" , &draw_bezier_quadratic_color );
		extern void draw_bezier_cubic(gs_scalar x1, gs_scalar y1,gs_scalar x2, gs_scalar y2,gs_scalar x3, gs_scalar y3, gs_scalar x4, gs_scalar y4);
		state.set( "draw_bezier_cubic" , &draw_bezier_cubic );
		extern void draw_bezier_cubic_color(gs_scalar x1, gs_scalar y1,gs_scalar x2, gs_scalar y2,gs_scalar x3, gs_scalar y3, gs_scalar x4, gs_scalar y4, int c1, int c2, gs_scalar a1, gs_scalar a2);
		state.set( "draw_bezier_cubic_color" , &draw_bezier_cubic_color );
		extern void draw_set_curve_mode(int mode);
		state.set( "draw_set_curve_mode" , &draw_set_curve_mode );
		extern void draw_set_curve_detail(int detail);
		state.set( "draw_set_curve_detail" , &draw_set_curve_detail );
		extern void draw_set_curve_width(int width);
		state.set( "draw_set_curve_width" , &draw_set_curve_width );
		extern gs_scalar draw_bezier_quadratic_x(gs_scalar x1, gs_scalar y1,gs_scalar x2, gs_scalar y2,gs_scalar x3, gs_scalar y3, float t);
		state.set( "draw_bezier_quadratic_x" , &draw_bezier_quadratic_x );
		extern gs_scalar draw_bezier_quadratic_y(gs_scalar x1, gs_scalar y1,gs_scalar x2, gs_scalar y2,gs_scalar x3, gs_scalar y3, float t);
		state.set( "draw_bezier_quadratic_y" , &draw_bezier_quadratic_y );
		extern gs_scalar draw_bezier_cubic_x(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3, gs_scalar x4, gs_scalar y4, float t);
		state.set( "draw_bezier_cubic_x" , &draw_bezier_cubic_x );
		extern gs_scalar draw_bezier_cubic_y(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3, gs_scalar x4, gs_scalar y4, float t);
		state.set( "draw_bezier_cubic_y" , &draw_bezier_cubic_y );
		extern void draw_bezier_quadratic_spline_part(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3, int c1, int c2, gs_scalar a1, gs_scalar a2);
		state.set( "draw_bezier_quadratic_spline_part" , &draw_bezier_quadratic_spline_part );
		//extern void draw_spline_part(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3, gs_scalar x4, gs_scalar y4, int c1, int c2, gs_scalar a1, gs_scalar a2);
		//state.set( "draw_spline_part" , &draw_spline_part );
		extern void draw_spline2c(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3, gs_scalar x4, gs_scalar y4);
		state.set( "draw_spline2c" , &draw_spline2c );
		extern void draw_spline2c_color(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3, gs_scalar x4, gs_scalar y4, int c1, int c2, gs_scalar a1, gs_scalar a2);
		state.set( "draw_spline2c_color" , &draw_spline2c_color );
		extern void draw_spline3(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3);
		state.set( "draw_spline3" , &draw_spline3 );
		extern void draw_spline3_color(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3, int c1, int c2, gs_scalar a1, gs_scalar a2);
		state.set( "draw_spline3_color" , &draw_spline3_color );
		extern void draw_spline3c(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3, gs_scalar x4, gs_scalar y4, gs_scalar x5, gs_scalar y5);
		state.set( "draw_spline3c" , &draw_spline3c );
		extern void draw_spline3c_color(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3, gs_scalar x4, gs_scalar y4, gs_scalar x5, gs_scalar y5, int c1, int c2, gs_scalar a1, gs_scalar a2);
		state.set( "draw_spline3c_color" , &draw_spline3c_color );
		extern void draw_spline4(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3, gs_scalar x4, gs_scalar y4);
		state.set( "draw_spline4" , &draw_spline4 );
		extern void draw_spline4_color(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3, gs_scalar x4, gs_scalar y4, int c1, int c2, gs_scalar a1, gs_scalar a2);
		state.set( "draw_spline4_color" , &draw_spline4_color );
		extern void draw_spline4c(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3, gs_scalar x4, gs_scalar y4, gs_scalar x5, gs_scalar y5, gs_scalar x6, gs_scalar y6);
		state.set( "draw_spline4c" , &draw_spline4c );
		extern void draw_spline4c_color(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3, gs_scalar x4, gs_scalar y4, gs_scalar x5, gs_scalar y5, gs_scalar x6, gs_scalar y6, int c1, int c2, gs_scalar a1, gs_scalar a2);
		state.set( "draw_spline4c_color" , &draw_spline4c_color );
		extern void draw_spline_part_color(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3, gs_scalar x4, gs_scalar y4, int c1, int c2, gs_scalar a1, gs_scalar a2);
		state.set( "draw_spline_part_color" , &draw_spline_part_color );
		extern void draw_spline_begin(int mode);
		state.set( "draw_spline_begin" , &draw_spline_begin );
		extern void draw_spline_vertex(gs_scalar x, gs_scalar y);
		state.set( "draw_spline_vertex" , &draw_spline_vertex );
		extern void draw_spline_vertex_color(gs_scalar x, gs_scalar y, int col, gs_scalar alpha);
		state.set( "draw_spline_vertex_color" , &draw_spline_vertex_color );
		extern void draw_spline_end();
		state.set( "draw_spline_end" , &draw_spline_end );
		extern void draw_bezier_quadratic_spline_end();
		state.set( "draw_bezier_quadratic_spline_end" , &draw_bezier_quadratic_spline_end );
		extern int draw_spline_optimized_end();
		state.set( "draw_spline_optimized_end" , &draw_spline_optimized_end );
		extern void d3d_depth_clear();
		state.set( "d3d_depth_clear" , &d3d_depth_clear );
		extern void d3d_depth_clear_value(float value);
		state.set( "d3d_depth_clear_value" , &d3d_depth_clear_value );
		extern void d3d_start();
		state.set( "d3d_start" , &d3d_start );
		extern void d3d_end();
		state.set( "d3d_end" , &d3d_end );
		extern void d3d_set_hidden(bool enable);
		state.set( "d3d_set_hidden" , &d3d_set_hidden );
		extern void d3d_set_clip_plane(bool enable);
		state.set( "d3d_set_clip_plane" , &d3d_set_clip_plane );
		extern void d3d_set_zwriteenable(bool enable);
		state.set( "d3d_set_zwriteenable" , &d3d_set_zwriteenable );
		extern void d3d_set_lighting(bool enable);
		state.set( "d3d_set_lighting" , &d3d_set_lighting );
		//extern void d3d_set_software_vertex_processing(bool software);
		//state.set( "d3d_set_software_vertex_processing" , &d3d_set_software_vertex_processing );
		extern void d3d_set_culling(int mode);
		state.set( "d3d_set_culling" , &d3d_set_culling );
		extern void d3d_set_fill_mode(int fill);
		state.set( "d3d_set_fill_mode" , &d3d_set_fill_mode );
		extern void d3d_set_line_width(float value);
		state.set( "d3d_set_line_width" , &d3d_set_line_width );
		extern void d3d_set_point_size(float value);
		state.set( "d3d_set_point_size" , &d3d_set_point_size );
		extern void d3d_set_depth_operator(int mode);
		state.set( "d3d_set_depth_operator" , &d3d_set_depth_operator );
		extern void d3d_set_fog(bool enable, int color, double start, double end);
		state.set( "d3d_set_fog" , &d3d_set_fog );
		extern void d3d_set_fog_enabled(bool enable);
		state.set( "d3d_set_fog_enabled" , &d3d_set_fog_enabled );
		extern void d3d_set_fog_hint(int mode);
		state.set( "d3d_set_fog_hint" , &d3d_set_fog_hint );
		extern void d3d_set_fog_mode(int mode);
		state.set( "d3d_set_fog_mode" , &d3d_set_fog_mode );
		extern void d3d_set_fog_color(int color);
		state.set( "d3d_set_fog_color" , &d3d_set_fog_color );
		extern void d3d_set_fog_start(double start);
		state.set( "d3d_set_fog_start" , &d3d_set_fog_start );
		extern void d3d_set_fog_end(double end);
		state.set( "d3d_set_fog_end" , &d3d_set_fog_end );
		extern void d3d_set_fog_density(double density);
		state.set( "d3d_set_fog_density" , &d3d_set_fog_density );
		extern void d3d_set_depth(double dep);
		state.set( "d3d_set_depth" , &d3d_set_depth );
		extern void d3d_clear_depth();
		state.set( "d3d_clear_depth" , &d3d_clear_depth );
		extern void d3d_set_shading(bool smooth);
		state.set( "d3d_set_shading" , &d3d_set_shading );
		extern bool d3d_get_mode();
		state.set( "d3d_get_mode" , &d3d_get_mode );
		extern int d3d_get_culling();
		state.set( "d3d_get_culling" , &d3d_get_culling );
		extern bool d3d_get_hidden();
		state.set( "d3d_get_hidden" , &d3d_get_hidden );
		extern bool d3d_light_define_direction(int id, gs_scalar dx, gs_scalar dy, gs_scalar dz, int col);
		state.set( "d3d_light_define_direction" , &d3d_light_define_direction );
		extern bool d3d_light_define_point(int id, gs_scalar x, gs_scalar y, gs_scalar z, double range, int col);
		state.set( "d3d_light_define_point" , &d3d_light_define_point );
		extern void d3d_light_specularity(int facemode, int r, int g, int b, double a);
		state.set( "d3d_light_specularity" , &d3d_light_specularity );
		//extern bool d3d_light_set_ambient(int id, int r, int g, int b, double a);
		//state.set( "d3d_light_set_ambient" , &d3d_light_set_ambient );
		//extern bool d3d_light_set_specularity(int id, int r, int g, int b, double a);
		//state.set( "d3d_light_set_specularity" , &d3d_light_set_specularity );
		extern void d3d_light_shininess(int facemode, int shine);
		state.set( "d3d_light_shininess" , &d3d_light_shininess );
		extern void d3d_light_define_ambient(int col);
		state.set( "d3d_light_define_ambient" , &d3d_light_define_ambient );
		extern bool d3d_light_enable(int id, bool enable);
		state.set( "d3d_light_enable" , &d3d_light_enable );
		extern void gs_enable_alpha(bool enable);
		state.set( "gs_enable_alpha" , &gs_enable_alpha );
		extern void gs_enable_blending(bool enable);
		state.set( "gs_enable_blending" , &gs_enable_blending );
		extern void gs_enable_depthbuffer(bool enable);
		state.set( "gs_enable_depthbuffer" , &gs_enable_depthbuffer );
		extern void gs_enable_dither(bool enable);
		state.set( "gs_enable_dither" , &gs_enable_dither );
		extern void gs_enable_smooth_lines(bool enable);
		state.set( "gs_enable_smooth_lines" , &gs_enable_smooth_lines );
		extern void gs_enable_stipple(bool enable);
		state.set( "gs_enable_stipple" , &gs_enable_stipple );
		extern void gs_enable_logical_op(bool enable);
		state.set( "gs_enable_logical_op" , &gs_enable_logical_op );
		extern void gs_enable_smooth_points(bool enable);
		state.set( "gs_enable_smooth_points" , &gs_enable_smooth_points );
		extern void gs_enable_smooth_polygons(bool enable);
		state.set( "gs_enable_smooth_polygons" , &gs_enable_smooth_polygons );
		extern void gs_enable_stencil(bool enable);
		state.set( "gs_enable_stencil" , &gs_enable_stencil );
		extern void gs_enable_texture(bool enable);
		state.set( "gs_enable_texture" , &gs_enable_texture );
		extern void draw_set_halign(unsigned align);
		state.set( "draw_set_halign" , &draw_set_halign );
		extern unsigned draw_get_halign();
		state.set( "draw_get_halign" , &draw_get_halign );
		extern void draw_set_valign(unsigned align);
		state.set( "draw_set_valign" , &draw_set_valign );
		extern unsigned draw_get_valign();
		state.set( "draw_get_valign" , &draw_get_valign );
		extern void draw_set_font(int fnt);
		state.set( "draw_set_font" , &draw_set_font );
		extern int draw_get_font();
		state.set( "draw_text" , &draw_text );
		state.set( "draw_get_font" , &draw_get_font );
		state.set( "draw_text_sprite" , &draw_text_sprite );
		state.set( "draw_text_skewed" , &draw_text_skewed );
		state.set( "draw_text_color" , &draw_text_color );
		state.set( "draw_text_ext" , &draw_text_ext );
		state.set( "draw_text_ext_color" , &draw_text_ext_color );
		state.set( "draw_text_transformed" , &draw_text_transformed );
		state.set( "draw_text_transformed_color" , &draw_text_transformed_color );
		state.set( "draw_text_ext_transformed" , &draw_text_ext_transformed );
		state.set( "draw_text_ext_transformed_color" , &draw_text_ext_transformed_color );
		extern unsigned int font_get_texture(int fnt);
		state.set( "font_get_texture" , &font_get_texture );
		extern unsigned int font_get_texture_width(int fnt);
		state.set( "font_get_texture_width" , &font_get_texture_width );
		extern unsigned int font_get_texture_height(int fnt);
		state.set( "font_get_texture_height" , &font_get_texture_height );
		state.set( "string_width" , &string_width );
		state.set( "string_height" , &string_height );
		/*extern unsigned int string_width_ext(variant str, gs_scalar sep, gs_scalar wid);
		state.set( "string_width_ext" , &string_width_ext );
		extern unsigned int string_height_ext(variant str, gs_scalar sep, gs_scalar wid);
		state.set( "string_height_ext" , &string_height_ext );
		extern unsigned int string_width_line(variant str, int line);
		state.set( "string_width_line" , &string_width_line );
		extern unsigned int string_width_ext_line(variant str, gs_scalar wid, int line);
		state.set( "string_width_ext_line" , &string_width_ext_line );
		extern unsigned int string_width_ext_line_count(variant str, gs_scalar wid);
		state.set( "string_width_ext_line_count" , &string_width_ext_line_count );*/
		extern void d3d_set_perspective(bool enable);
		state.set( "d3d_set_perspective" , &d3d_set_perspective );
		extern void d3d_set_projection(gs_scalar xfrom, gs_scalar yfrom, gs_scalar zfrom,gs_scalar xto, gs_scalar yto, gs_scalar zto,gs_scalar xup, gs_scalar yup, gs_scalar zup);
		state.set( "d3d_set_projection" , &d3d_set_projection );
		extern void d3d_set_projection_ext(gs_scalar xfrom, gs_scalar yfrom, gs_scalar zfrom,gs_scalar xto, gs_scalar yto, gs_scalar zto, gs_scalar xup, gs_scalar yup, gs_scalar zup, gs_scalar angle, gs_scalar aspect, gs_scalar znear, gs_scalar zfar);
		state.set( "d3d_set_projection_ext" , &d3d_set_projection_ext );
		extern void d3d_set_projection_ortho(gs_scalar x, gs_scalar y, gs_scalar width, gs_scalar height, gs_scalar angle);
		state.set( "d3d_set_projection_ortho" , &d3d_set_projection_ortho );
		extern void d3d_set_projection_perspective(gs_scalar x, gs_scalar y, gs_scalar width, gs_scalar height, gs_scalar angle);
		state.set( "d3d_set_projection_perspective" , &d3d_set_projection_perspective );
		extern void d3d_transform_set_identity();
		state.set( "d3d_transform_set_identity" , &d3d_transform_set_identity );
		extern void d3d_transform_add_translation(gs_scalar xt, gs_scalar yt, gs_scalar zt);
		state.set( "d3d_transform_add_translation" , &d3d_transform_add_translation );
		extern void d3d_transform_add_scaling(gs_scalar xs, gs_scalar ys, gs_scalar zs);
		state.set( "d3d_transform_add_scaling" , &d3d_transform_add_scaling );
		extern void d3d_transform_add_rotation_x(gs_scalar angle);
		state.set( "d3d_transform_add_rotation_x" , &d3d_transform_add_rotation_x );
		extern void d3d_transform_add_rotation_y(gs_scalar angle);
		state.set( "d3d_transform_add_rotation_y" , &d3d_transform_add_rotation_y );
		extern void d3d_transform_add_rotation_z(gs_scalar angle);
		state.set( "d3d_transform_add_rotation_z" , &d3d_transform_add_rotation_z );
		extern void d3d_transform_add_rotation_axis(gs_scalar x, gs_scalar y, gs_scalar z, gs_scalar angle);
		state.set( "d3d_transform_add_rotation_axis" , &d3d_transform_add_rotation_axis );
		extern void d3d_transform_set_translation(gs_scalar xt, gs_scalar yt, gs_scalar zt);
		state.set( "d3d_transform_set_translation" , &d3d_transform_set_translation );
		extern void d3d_transform_set_scaling(gs_scalar xs, gs_scalar ys, gs_scalar zs);
		state.set( "d3d_transform_set_scaling" , &d3d_transform_set_scaling );
		extern void d3d_transform_set_rotation_x(gs_scalar angle);
		state.set( "d3d_transform_set_rotation_x" , &d3d_transform_set_rotation_x );
		extern void d3d_transform_set_rotation_y(gs_scalar angle);
		state.set( "d3d_transform_set_rotation_y" , &d3d_transform_set_rotation_y );
		extern void d3d_transform_set_rotation_z(gs_scalar angle);
		state.set( "d3d_transform_set_rotation_z" , &d3d_transform_set_rotation_z );
		extern void d3d_transform_set_rotation_axis(gs_scalar x, gs_scalar y, gs_scalar z, gs_scalar angle);
		state.set( "d3d_transform_set_rotation_axis" , &d3d_transform_set_rotation_axis );
		extern bool d3d_transform_stack_push();
		state.set( "d3d_transform_stack_push" , &d3d_transform_stack_push );
		extern bool d3d_transform_stack_pop();
		state.set( "d3d_transform_stack_pop" , &d3d_transform_stack_pop );
		extern void d3d_transform_stack_clear();
		state.set( "d3d_transform_stack_clear" , &d3d_transform_stack_clear );
		extern bool d3d_transform_stack_empty();
		state.set( "d3d_transform_stack_empty" , &d3d_transform_stack_empty );
		extern bool d3d_transform_stack_top();
		state.set( "d3d_transform_stack_top" , &d3d_transform_stack_top );
		extern bool d3d_transform_stack_disgard();
		state.set( "d3d_transform_stack_disgard" , &d3d_transform_stack_disgard );
		extern bool d3d_projection_stack_push();
		state.set( "d3d_projection_stack_push" , &d3d_projection_stack_push );
		extern bool d3d_projection_stack_pop();
		state.set( "d3d_projection_stack_pop" , &d3d_projection_stack_pop );
		extern void d3d_projection_stack_clear();
		state.set( "d3d_projection_stack_clear" , &d3d_projection_stack_clear );
		extern bool d3d_projection_stack_empty();
		state.set( "d3d_projection_stack_empty" , &d3d_projection_stack_empty );
		extern bool d3d_projection_stack_top();
		state.set( "d3d_projection_stack_top" , &d3d_projection_stack_top );
		extern bool d3d_projection_stack_disgard();
		state.set( "d3d_projection_stack_disgard" , &d3d_projection_stack_disgard );
		/*extern gs_scalar* d3d_transform_vertex(gs_scalar x, gs_scalar y, gs_scalar z);
		state.set( "d3d_transform_vertex" , &d3d_transform_vertex );
		extern gs_scalar* matrix_get(int type);
		state.set( "matrix_get" , &matrix_get );
		extern void matrix_set(int type, gs_scalar* matrix);
		state.set( "matrix_set" , &matrix_set );
		extern gs_scalar* matrix_build(gs_scalar x, gs_scalar y, gs_scalar z, gs_scalar xrotation, gs_scalar yrotation, gs_scalar zrotation, gs_scalar xscale, gs_scalar yscale, gs_scalar zscale);
		state.set( "matrix_build" , &matrix_build );
		extern gs_scalar* matrix_multiply(gs_scalar* matrix1, gs_scalar* matrix2);
		state.set( "matrix_multiply" , &matrix_multiply );*/
		extern void draw_primitive_begin(int kind);
		state.set( "draw_primitive_begin" , &draw_primitive_begin );
		extern void draw_primitive_begin_texture(int kind, int texId);
		state.set( "draw_primitive_begin_texture" , &draw_primitive_begin_texture );
		extern void draw_primitive_end();
		state.set( "draw_primitive_end" , &draw_primitive_end );
		extern void draw_vertex(gs_scalar x, gs_scalar y);
		state.set( "draw_vertex" , &draw_vertex );
		extern void draw_vertex_color(gs_scalar x, gs_scalar y, int color, float alpha);
		state.set( "draw_vertex_color" , &draw_vertex_color );
		extern void draw_vertex_texture(gs_scalar x, gs_scalar y, gs_scalar tx, gs_scalar ty);
		state.set( "draw_vertex_texture" , &draw_vertex_texture );
		extern void draw_vertex_texture_color(gs_scalar x, gs_scalar y, gs_scalar tx, gs_scalar ty, int col, float alpha);
		state.set( "draw_vertex_texture_color" , &draw_vertex_texture_color );
		extern void d3d_primitive_begin(int kind);
		state.set( "d3d_primitive_begin" , &d3d_primitive_begin );
		extern void d3d_primitive_begin_texture(int kind, int texId);
		state.set( "d3d_primitive_begin_texture" , &d3d_primitive_begin_texture );
		extern void d3d_primitive_end();
		state.set( "d3d_primitive_end" , &d3d_primitive_end );
		extern void d3d_vertex(gs_scalar x, gs_scalar y, gs_scalar z);
		state.set( "d3d_vertex" , &d3d_vertex );
		extern void d3d_vertex_color(gs_scalar x, gs_scalar y, gs_scalar z, int color, double alpha);
		state.set( "d3d_vertex_color" , &d3d_vertex_color );
		extern void d3d_vertex_texture(gs_scalar x, gs_scalar y, gs_scalar z, gs_scalar tx, gs_scalar ty);
		state.set( "d3d_vertex_texture" , &d3d_vertex_texture );
		extern void d3d_vertex_texture_color(gs_scalar x, gs_scalar y, gs_scalar z, gs_scalar tx, gs_scalar ty, int color, double alpha);
		state.set( "d3d_vertex_texture_color" , &d3d_vertex_texture_color );
		extern void d3d_vertex_normal(gs_scalar x, gs_scalar y, gs_scalar z, gs_scalar nx, gs_scalar ny, gs_scalar nz);
		state.set( "d3d_vertex_normal" , &d3d_vertex_normal );
		extern void d3d_vertex_normal_color(gs_scalar x, gs_scalar y, gs_scalar z, gs_scalar nx, gs_scalar ny, gs_scalar nz, int color, double alpha);
		state.set( "d3d_vertex_normal_color" , &d3d_vertex_normal_color );
		extern void d3d_vertex_normal_texture(gs_scalar x, gs_scalar y, gs_scalar z, gs_scalar nx, gs_scalar ny, gs_scalar nz, gs_scalar tx, gs_scalar ty);
		state.set( "d3d_vertex_normal_texture" , &d3d_vertex_normal_texture );
		extern void d3d_vertex_normal_texture_color(gs_scalar x, gs_scalar y, gs_scalar z, gs_scalar nx, gs_scalar ny, gs_scalar nz, gs_scalar tx, gs_scalar ty, int color, double alpha);
		state.set( "d3d_vertex_normal_texture_color" , &d3d_vertex_normal_texture_color );
		extern void d3d_draw_wall(gs_scalar x1, gs_scalar y1, gs_scalar z1, gs_scalar x2, gs_scalar y2, gs_scalar z2, int texId, gs_scalar hrep, gs_scalar vrep);
		state.set( "d3d_draw_wall" , &d3d_draw_wall );
		extern void d3d_draw_floor(gs_scalar x1, gs_scalar y1, gs_scalar z1, gs_scalar x2, gs_scalar y2, gs_scalar z2, int texId, gs_scalar hrep, gs_scalar vrep);
		state.set( "d3d_draw_floor" , &d3d_draw_floor );
		extern void d3d_draw_cylinder(gs_scalar x1, gs_scalar y1, gs_scalar z1, gs_scalar x2, gs_scalar y2, gs_scalar z2, int texid, gs_scalar hrep, gs_scalar vrep, bool closed, int steps);
		state.set( "d3d_draw_cylinder" , &d3d_draw_cylinder );
		extern void d3d_draw_cone(gs_scalar x1, gs_scalar y1, gs_scalar z1, gs_scalar x2, gs_scalar y2, gs_scalar z2, int texid, gs_scalar hrep, gs_scalar vrep, bool closed, int steps);
		state.set( "d3d_draw_cone" , &d3d_draw_cone );
		extern void d3d_draw_ellipsoid(gs_scalar x1, gs_scalar y1, gs_scalar z1, gs_scalar x2, gs_scalar y2, gs_scalar z2, int texid, gs_scalar hrep, gs_scalar vrep, int steps);
		state.set( "d3d_draw_ellipsoid" , &d3d_draw_ellipsoid );
		extern void d3d_draw_icosahedron(gs_scalar x1, gs_scalar y1, gs_scalar z1, gs_scalar x2, gs_scalar y2, gs_scalar z2, int texId, gs_scalar hrep, gs_scalar vrep, int steps);
		state.set( "d3d_draw_icosahedron" , &d3d_draw_icosahedron );
		//extern void d3d_draw_torus(gs_scalar x1, gs_scalar y1, gs_scalar z1, int texId, gs_scalar hrep, gs_scalar vrep, int csteps, int tsteps, float radius, float tradius);
		//state.set( "d3d_draw_torus" , &d3d_draw_torus );
		extern int screen_save(string filename);
		state.set( "screen_save" , &screen_save );
		extern int sprite_create_from_screen(int x, int y, int w, int h, bool removeback, bool smooth, bool preload, int xorig, int yorig);
		state.set( "sprite_create_from_screen" , &sprite_create_from_screen );
		extern void sprite_add_from_screen(int id, int x, int y, int w, int h, bool removeback, bool smooth);
		state.set( "sprite_add_from_screen" , &sprite_add_from_screen );
		extern int draw_get_msaa_maxlevel();
		state.set( "draw_get_msaa_maxlevel" , &draw_get_msaa_maxlevel );
		extern bool draw_get_msaa_supported();
		state.set( "draw_get_msaa_supported" , &draw_get_msaa_supported );
		extern void draw_set_msaa_enabled(bool enable);
		state.set( "draw_set_msaa_enabled" , &draw_set_msaa_enabled );
		extern bool draw_get_alpha_test();
		state.set( "draw_get_alpha_test" , &draw_get_alpha_test );
		extern unsigned draw_get_alpha_test_ref_value();
		state.set( "draw_get_alpha_test_ref_value" , &draw_get_alpha_test_ref_value );
		extern void draw_set_alpha_test(bool enable);
		state.set( "draw_set_alpha_test" , &draw_set_alpha_test );
		extern void draw_set_alpha_test_ref_value(unsigned val);
		state.set( "draw_set_alpha_test_ref_value" , &draw_set_alpha_test_ref_value );
		extern void draw_enable_alphablend(bool enable);
		state.set( "draw_enable_alphablend" , &draw_enable_alphablend );
		//extern void draw_set_line_pattern(unsigned short pattern, int scale);
		//state.set( "draw_set_line_pattern" , &draw_set_line_pattern );
		extern void draw_point(gs_scalar x, gs_scalar y);
		state.set( "draw_point" , &draw_point );
		extern void draw_point_color(gs_scalar x, gs_scalar y, int color);
		state.set( "draw_point_color" , &draw_point_color );
		extern void draw_line(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2);
		state.set( "draw_line" , &draw_line );
		extern void draw_line_width(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar wid);
		state.set( "draw_line_width" , &draw_line_width );
		extern void draw_line_color(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, int color1, int color2);
		state.set( "draw_line_color" , &draw_line_color );
		extern void draw_line_width_color(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar wid, int color1, int color2);
		state.set( "draw_line_width_color" , &draw_line_width_color );
		extern void draw_rectangle(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, bool outline);
		state.set( "draw_rectangle" , &draw_rectangle );
		extern void draw_rectangle_angle(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, float angle, bool outline);
		state.set( "draw_rectangle_angle" , &draw_rectangle_angle );
		extern void draw_set_circle_precision(float precision);
		state.set( "draw_set_circle_precision" , &draw_set_circle_precision );
		extern float draw_get_circle_precision(void);
		state.set( "draw_get_circle_precision" , &draw_get_circle_precision );
		extern void draw_circle(gs_scalar x, gs_scalar y, float rad, bool outline);
		state.set( "draw_circle" , &draw_circle );
		extern void draw_circle_perfect(gs_scalar x, gs_scalar y, float rad, bool outline);
		state.set( "draw_circle_perfect" , &draw_circle_perfect );
		extern void draw_ellipse(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, bool outline);
		state.set( "draw_ellipse" , &draw_ellipse );
		extern void draw_ellipse_perfect(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, bool outline);
		state.set( "draw_ellipse_perfect" , &draw_ellipse_perfect );
		extern void draw_triangle(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar x3, gs_scalar y3, bool outline);
		state.set( "draw_triangle" , &draw_triangle );
		extern void draw_roundrect(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, float rad, bool outline);
		state.set( "draw_roundrect" , &draw_roundrect );
		extern void draw_roundrect_color(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, float rad, int col1, int col2, bool outline);
		state.set( "draw_roundrect_color" , &draw_roundrect_color );
		extern void draw_roundrect_ext(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, float xrad, float yrad, bool outline);
		state.set( "draw_roundrect_ext" , &draw_roundrect_ext );
		extern void draw_roundrect_color_ext(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, float xrad, float yrad, int col1, int col2, bool outline);
		state.set( "draw_roundrect_color_ext" , &draw_roundrect_color_ext );
		extern void draw_roundrect_precise(gs_scalar x1, gs_scalar y1,gs_scalar x2, gs_scalar y2, float rad, bool outline);
		state.set( "draw_roundrect_precise" , &draw_roundrect_precise );
		extern void draw_roundrect_precise_color(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, float rad, int col1, int col2, bool outline);
		state.set( "draw_roundrect_precise_color" , &draw_roundrect_precise_color );
		extern void draw_healthbar(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, float amount, int backcol, int mincol, int maxcol, int direction, bool showback, bool showborder);
		state.set( "draw_healthbar" , &draw_healthbar );
		//extern void draw_mandelbrot(gs_scalar x, gs_scalar y, float w, double Zx, double Zy, double Zw, unsigned iter);
		//state.set( "draw_mandelbrot" , &draw_mandelbrot );
		extern void draw_button(gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, float border_width, bool up);
		state.set( "draw_button" , &draw_button );
		extern int draw_getpixel(int,int);
		state.set( "draw_getpixel" , &draw_getpixel );
		extern int draw_getpixel_ext(int, int);
		state.set( "draw_getpixel_ext" , &draw_getpixel_ext );
		extern void draw_polygon_begin();
		state.set( "draw_polygon_begin" , &draw_polygon_begin );
		extern int surface_create_msaa(int width, int height, int samples);
		state.set( "surface_create_msaa" , &surface_create_msaa );
		extern int surface_get_target();
		state.set( "surface_get_target" , &surface_get_target );
		extern void surface_set_target(int id);
		state.set( "surface_set_target" , &surface_set_target );
		extern void surface_reset_target();
		state.set( "surface_reset_target" , &surface_reset_target );
		extern void surface_free(int id);
		state.set( "surface_free" , &surface_free );
		extern bool surface_exists(int id);
		state.set( "surface_exists" , &surface_exists );
		extern void draw_surface_ext(int id,gs_scalar x, gs_scalar y,gs_scalar xscale, gs_scalar yscale, double rot, int color, gs_scalar alpha);
		state.set( "draw_surface_ext" , &draw_surface_ext );
		extern void draw_surface_stretched_ext(int id, gs_scalar x, gs_scalar y, gs_scalar wid, gs_scalar hei, int color, gs_scalar alpha);
		state.set( "draw_surface_stretched_ext" , &draw_surface_stretched_ext );
		extern void draw_surface_part_ext(int id, gs_scalar left, gs_scalar top, gs_scalar wid, gs_scalar hei, gs_scalar x, gs_scalar y, gs_scalar xscale, gs_scalar yscale, int color, gs_scalar alpha);
		state.set( "draw_surface_part_ext" , &draw_surface_part_ext );
		extern void draw_surface_tiled_ext(int id, gs_scalar x, gs_scalar y, gs_scalar xscale, gs_scalar yscale, int color, gs_scalar alpha);
		state.set( "draw_surface_tiled_ext" , &draw_surface_tiled_ext );
		extern void draw_surface_tiled_area_ext(int id, gs_scalar x, gs_scalar y, gs_scalar x1, gs_scalar y1, gs_scalar x2, gs_scalar y2, gs_scalar xscale, gs_scalar yscale, int color, gs_scalar alpha);
		state.set( "draw_surface_tiled_area_ext" , &draw_surface_tiled_area_ext );
		extern void draw_surface_general(int id, gs_scalar left, gs_scalar top, gs_scalar wid, gs_scalar hei, gs_scalar x, gs_scalar y, gs_scalar xscale, gs_scalar yscale, double rot, int c1, int c2, int c3, int c4, gs_scalar alpha);
		state.set( "draw_surface_general" , &draw_surface_general );
		extern int surface_get_texture(int id);
		state.set( "surface_get_texture" , &surface_get_texture );
		extern int surface_get_width(int id);
		state.set( "surface_get_width" , &surface_get_width );
		extern int surface_get_height(int id);
		state.set( "surface_get_height" , &surface_get_height );
		extern int surface_getpixel(int id, int x, int y);
		state.set( "surface_getpixel" , &surface_getpixel );
		extern int surface_getpixel_ext(int id, int x, int y);
		state.set( "surface_getpixel_ext" , &surface_getpixel_ext );
		extern int surface_getpixel_alpha(int id, int x, int y);
		state.set( "surface_getpixel_alpha" , &surface_getpixel_alpha );
		extern int surface_save(int id, string filename);
		state.set( "surface_save" , &surface_save );
		extern int surface_save_part(int id, string filename, unsigned x, unsigned y, unsigned w, unsigned h);
		state.set( "surface_save_part" , &surface_save_part );
		extern void surface_copy(int destination,gs_scalar x, gs_scalar y,int source);
		state.set( "surface_copy" , &surface_copy );
		extern void surface_copy_part(int destination, gs_scalar x, gs_scalar y, int source ,int xs, int ys, int ws, int hs);
		state.set( "surface_copy_part" , &surface_copy_part );
		extern int sprite_create_from_surface(int id, int x, int y, int w, int h, bool removeback, bool smooth, bool preload, int xorig, int yorig);
		state.set( "sprite_create_from_surface" , &sprite_create_from_surface );
		extern void sprite_add_from_surface(int ind, int id, int x, int y, int w, int h, bool removeback, bool smooth);
		state.set( "sprite_add_from_surface" , &sprite_add_from_surface );
		extern bool surface_is_supported();
		state.set( "surface_is_supported" , &surface_is_supported );
		extern void texture_save(int texid, string fname);
		state.set( "texture_save" , &texture_save );
		extern void texture_delete(int texid);
		state.set( "texture_delete" , &texture_delete );
		extern bool texture_exists(int texid);
		state.set( "texture_exists" , &texture_exists );
		extern void texture_preload(int texid);
		state.set( "texture_preload" , &texture_preload );
		extern void texture_set_enabled(bool enable);
		state.set( "texture_set_enabled" , &texture_set_enabled );
		extern gs_scalar texture_get_width(int texid);
		state.set( "texture_get_width" , &texture_get_width );
		extern gs_scalar texture_get_height(int texid);
		state.set( "texture_get_height" , &texture_get_height );
		extern unsigned texture_get_texel_width(int texid);
		state.set( "texture_get_texel_width" , &texture_get_texel_width );
		extern unsigned texture_get_texel_height(int texid);
		state.set( "texture_get_texel_height" , &texture_get_texel_height );
		extern void texture_set_priority(int texid, double prio);
		state.set( "texture_set_priority" , &texture_set_priority );
		//extern void texture_set(int texid);
		//state.set( "texture_set" , &texture_set );
		extern void texture_set_stage(int stage, int texid);
		state.set( "texture_set_stage" , &texture_set_stage );
		extern void texture_reset();
		state.set( "texture_reset" , &texture_reset );
		extern void texture_set_blending(bool enable);
		state.set( "texture_set_blending" , &texture_set_blending );
		//extern void texture_set_repeat(bool repeat);
		//state.set( "texture_set_repeat" , &texture_set_repeat );
		extern void texture_set_repeat_ext(int sampler, bool repeat);
		state.set( "texture_set_repeat_ext" , &texture_set_repeat_ext );
		//extern void texture_set_wrap(bool wrapu, bool wrapv, bool wrapw);
		//state.set( "texture_set_wrap" , &texture_set_wrap );
		extern void texture_set_wrap_ext(int sampler, bool wrapu, bool wrapv, bool wrapw);
		state.set( "texture_set_wrap_ext" , &texture_set_wrap_ext );
		//extern void texture_set_border(int r, int g, int b, double a);
		//state.set( "texture_set_border" , &texture_set_border );
		extern void texture_set_border_ext(int sampler, int r, int g, int b, double a);
		state.set( "texture_set_border_ext" , &texture_set_border_ext );
		//extern void texture_set_filter(int filter);
		//state.set( "texture_set_filter" , &texture_set_filter );
		extern void texture_set_filter_ext(int sampler, int filter);
		state.set( "texture_set_filter_ext" , &texture_set_filter_ext );
		//extern void texture_set_lod(gs_scalar minlod, gs_scalar maxlod, int maxlevel);
		//state.set( "texture_set_lod" , &texture_set_lod );
		//extern void texture_set_lod_ext(int sampler, gs_scalar minlod, gs_scalar maxlod, int maxlevel);
		//state.set( "texture_set_lod_ext" , &texture_set_lod_ext );
		extern bool texture_mipmapping_supported();
		state.set( "texture_mipmapping_supported" , &texture_mipmapping_supported );
		extern bool  texture_anisotropy_supported();
		state.set( "texture_anisotropy_supported" , &texture_anisotropy_supported );
		extern float texture_anisotropy_maxlevel();
		state.set( "texture_anisotropy_maxlevel" , &texture_anisotropy_maxlevel );
		extern void  texture_anisotropy_filter(int samplerid, gs_scalar level);
		state.set( "texture_anisotropy_filter" , &texture_anisotropy_filter );
		extern bool tile_delete(int id);
		state.set( "tile_delete" , &tile_delete );
		extern bool tile_exists(int id);
		state.set( "tile_exists" , &tile_exists );
		extern double tile_get_alpha(int id);
		state.set( "tile_get_alpha" , &tile_get_alpha );
		extern int tile_get_background(int id);
		state.set( "tile_get_background" , &tile_get_background );
		extern int tile_get_blend(int id);
		state.set( "tile_get_blend" , &tile_get_blend );
		extern int tile_get_depth(int id);
		state.set( "tile_get_depth" , &tile_get_depth );
		extern int tile_get_height(int id);
		state.set( "tile_get_height" , &tile_get_height );
		extern int tile_get_left(int id);
		state.set( "tile_get_left" , &tile_get_left );
		extern int tile_get_top(int id);
		state.set( "tile_get_top" , &tile_get_top );
		extern double tile_get_visible(int id);
		state.set( "tile_get_visible" , &tile_get_visible );
		extern bool tile_get_width(int id);
		state.set( "tile_get_width" , &tile_get_width );
		extern int tile_get_x(int id);
		state.set( "tile_get_x" , &tile_get_x );
		extern int tile_get_xscale(int id);
		state.set( "tile_get_xscale" , &tile_get_xscale );
		extern int tile_get_y(int id);
		state.set( "tile_get_y" , &tile_get_y );
		extern int tile_get_yscale(int id);
		state.set( "tile_get_yscale" , &tile_get_yscale );
		extern bool tile_set_alpha(int id, double alpha);
		state.set( "tile_set_alpha" , &tile_set_alpha );
		extern bool tile_set_background(int id, int background);
		state.set( "tile_set_background" , &tile_set_background );
		extern bool tile_set_blend(int id, int color);
		state.set( "tile_set_blend" , &tile_set_blend );
		extern bool tile_set_position(int id, int x, int y);
		state.set( "tile_set_position" , &tile_set_position );
		extern bool tile_set_region(int id, int left, int top, int width, int height);
		state.set( "tile_set_region" , &tile_set_region );
		extern bool tile_set_scale(int id, int xscale, int yscale);
		state.set( "tile_set_scale" , &tile_set_scale );
		extern bool tile_set_visible(int id, bool visible);
		state.set( "tile_set_visible" , &tile_set_visible );
		extern bool tile_set_depth(int id, int depth);
		state.set( "tile_set_depth" , &tile_set_depth );
		extern bool tile_layer_delete(int layer_depth);
		state.set( "tile_layer_delete" , &tile_layer_delete );
		extern bool tile_layer_delete_at(int layer_depth, int x, int y);
		state.set( "tile_layer_delete_at" , &tile_layer_delete_at );
		extern bool tile_layer_depth(int layer_depth, int depth);
		state.set( "tile_layer_depth" , &tile_layer_depth );
		extern int tile_layer_find(int layer_depth, int x, int y);
		state.set( "tile_layer_find" , &tile_layer_find );
		extern bool tile_layer_hide(int layer_depth);
		state.set( "tile_layer_hide" , &tile_layer_hide );
		extern bool tile_layer_show(int layer_depth);
		state.set( "tile_layer_show" , &tile_layer_show );
		extern bool tile_layer_shift(int layer_depth, int x, int y);
		state.set( "tile_layer_shift" , &tile_layer_shift );
		/*extern int glsl_shader_create(int type);
		state.set( "glsl_shader_create" , &glsl_shader_create );
		extern int glsl_shader_load(int id, string fname);
		state.set( "glsl_shader_load" , &glsl_shader_load );
		extern bool glsl_shader_compile(int id);
		state.set( "glsl_shader_compile" , &glsl_shader_compile );
		extern bool glsl_shader_get_compiled(int id);
		state.set( "glsl_shader_get_compiled" , &glsl_shader_get_compiled );
		extern string glsl_shader_get_infolog(int id);
		state.set( "glsl_shader_get_infolog" , &glsl_shader_get_infolog );
		extern void glsl_shader_free(int id);
		state.set( "glsl_shader_free" , &glsl_shader_free );
		extern int glsl_program_create();
		state.set( "glsl_program_create" , &glsl_program_create );
		extern bool glsl_program_link(int id);
		state.set( "glsl_program_link" , &glsl_program_link );
		extern bool glsl_program_validate(int id);
		state.set( "glsl_program_validate" , &glsl_program_validate );
		extern void glsl_program_attach(int id, int sid);
		state.set( "glsl_program_attach" , &glsl_program_attach );
		extern void glsl_program_detach(int id, int sid);
		state.set( "glsl_program_detach" , &glsl_program_detach );
		extern void glsl_program_bind_frag_data(int id, string name);
		state.set( "glsl_program_bind_frag_data" , &glsl_program_bind_frag_data );
		extern void glsl_program_set(int id);
		state.set( "glsl_program_set" , &glsl_program_set );
		extern void glsl_program_reset();
		state.set( "glsl_program_reset" , &glsl_program_reset );
		extern void glsl_program_free(int id);
		state.set( "glsl_program_free" , &glsl_program_free );
		extern int glsl_get_uniform_location(int program, string name);
		state.set( "glsl_get_uniform_location" , &glsl_get_uniform_location );
		extern void glsl_uniformf(int location, float v0);
		state.set( "glsl_uniformf" , &glsl_uniformf );
		extern void glsl_uniformf(int location, float v0, float v1);
		state.set( "glsl_uniformf" , &glsl_uniformf );
		extern void glsl_uniformf(int location, float v0, float v1, float v2);
		state.set( "glsl_uniformf" , &glsl_uniformf );
		extern void glsl_uniformf(int location, float v0, float v1, float v2, float v3);
		state.set( "glsl_uniformf" , &glsl_uniformf );
		extern void glsl_uniformi(int location, int v0);
		state.set( "glsl_uniformi" , &glsl_uniformi );
		extern void glsl_uniformi(int location, int v0, int v1);
		state.set( "glsl_uniformi" , &glsl_uniformi );
		extern void glsl_uniformi(int location, int v0, int v1, int v2);
		state.set( "glsl_uniformi" , &glsl_uniformi );
		extern void glsl_uniformi(int location, int v0, int v1, int v2, int v3);
		state.set( "glsl_uniformi" , &glsl_uniformi );
		extern void glsl_uniformui(int location, unsigned v0);
		state.set( "glsl_uniformui" , &glsl_uniformui );
		extern void glsl_uniformui(int location, unsigned v0, unsigned v1);
		state.set( "glsl_uniformui" , &glsl_uniformui );
		extern void glsl_uniformui(int location, unsigned v0, unsigned v1, unsigned v2);
		state.set( "glsl_uniformui" , &glsl_uniformui );
		extern void glsl_uniformui(int location, unsigned v0, unsigned v1, unsigned v2, unsigned v3);
		state.set( "glsl_uniformui" , &glsl_uniformui );
		extern int profiler_get_vertex_count();
		state.set( "profiler_get_vertex_count" , &profiler_get_vertex_count );
		extern int profiler_get_drawcall_count();
		state.set( "profiler_get_drawcall_count" , &profiler_get_drawcall_count );
		extern int profiler_get_vbo_count();
		state.set( "profiler_get_vbo_count" , &profiler_get_vbo_count );
		extern int glsl_shader_create(int type);
		state.set( "glsl_shader_create" , &glsl_shader_create );
		extern bool glsl_shader_load(int id, string fname);
		state.set( "glsl_shader_load" , &glsl_shader_load );
		extern bool glsl_shader_load_string(int id, string shaderSource);
		state.set( "glsl_shader_load_string" , &glsl_shader_load_string );
		extern bool glsl_shader_compile(int id);
		state.set( "glsl_shader_compile" , &glsl_shader_compile );
		extern bool glsl_shader_get_compiled(int id);
		state.set( "glsl_shader_get_compiled" , &glsl_shader_get_compiled );
		extern void glsl_shader_free(int id);
		state.set( "glsl_shader_free" , &glsl_shader_free );
		extern string glsl_shader_get_infolog(int id);
		state.set( "glsl_shader_get_infolog" , &glsl_shader_get_infolog );
		extern void glsl_program_print_infolog(int id);
		state.set( "glsl_program_print_infolog" , &glsl_program_print_infolog );
		extern void glsl_shader_print_infolog(int id);
		state.set( "glsl_shader_print_infolog" , &glsl_shader_print_infolog );
		extern int glsl_program_create();
		state.set( "glsl_program_create" , &glsl_program_create );
		extern bool glsl_program_link(int id);
		state.set( "glsl_program_link" , &glsl_program_link );
		extern bool glsl_program_validate(int id);
		state.set( "glsl_program_validate" , &glsl_program_validate );
		extern void glsl_program_attach(int id, int sid);
		state.set( "glsl_program_attach" , &glsl_program_attach );
		extern void glsl_program_detach(int id, int sid);
		state.set( "glsl_program_detach" , &glsl_program_detach );
		extern string glsl_program_get_infolog(int id);
		state.set( "glsl_program_get_infolog" , &glsl_program_get_infolog );
		extern void glsl_program_set(int id);
		state.set( "glsl_program_set" , &glsl_program_set );
		extern void glsl_program_reset();
		state.set( "glsl_program_reset" , &glsl_program_reset );
		extern void glsl_program_free(int id);
		state.set( "glsl_program_free" , &glsl_program_free );
		extern void glsl_program_default_set(int id);
		state.set( "glsl_program_default_set" , &glsl_program_default_set );
		extern void glsl_program_default_reset();
		state.set( "glsl_program_default_reset" , &glsl_program_default_reset );
		extern void glsl_program_set_name(int id, string name);
		state.set( "glsl_program_set_name" , &glsl_program_set_name );
		extern int glsl_get_uniform_location(int program, string name);
		state.set( "glsl_get_uniform_location" , &glsl_get_uniform_location );
		extern int glsl_get_attribute_location(int program, string name);
		state.set( "glsl_get_attribute_location" , &glsl_get_attribute_location );
		extern void glsl_uniformf(int location, float v0);
		state.set( "glsl_uniformf" , &glsl_uniformf );
		extern void glsl_uniformf(int location, float v0, float v1);
		state.set( "glsl_uniformf" , &glsl_uniformf );
		extern void glsl_uniformf(int location, float v0, float v1, float v2);
		state.set( "glsl_uniformf" , &glsl_uniformf );
		extern void glsl_uniformf(int location, float v0, float v1, float v2, float v3);
		state.set( "glsl_uniformf" , &glsl_uniformf );
		extern void glsl_uniformi(int location, int v0);
		state.set( "glsl_uniformi" , &glsl_uniformi );
		extern void glsl_uniformi(int location, int v0, int v1);
		state.set( "glsl_uniformi" , &glsl_uniformi );
		extern void glsl_uniformi(int location, int v0, int v1, int v2);
		state.set( "glsl_uniformi" , &glsl_uniformi );
		extern void glsl_uniformi(int location, int v0, int v1, int v2, int v3);
		state.set( "glsl_uniformi" , &glsl_uniformi );
		extern void glsl_uniformui(int location, unsigned v0);
		state.set( "glsl_uniformui" , &glsl_uniformui );
		extern void glsl_uniformui(int location, unsigned v0, unsigned v1);
		state.set( "glsl_uniformui" , &glsl_uniformui );
		extern void glsl_uniformui(int location, unsigned v0, unsigned v1, unsigned v2);
		state.set( "glsl_uniformui" , &glsl_uniformui );
		extern void glsl_uniformui(int location, unsigned v0, unsigned v1, unsigned v2, unsigned v3);
		state.set( "glsl_uniformui" , &glsl_uniformui );
		extern void glsl_uniform1fv(int location, int size, const float *value);
		state.set( "glsl_uniform1fv" , &glsl_uniform1fv );
		extern void glsl_uniform2fv(int location, int size, const float *value);
		state.set( "glsl_uniform2fv" , &glsl_uniform2fv );
		extern void glsl_uniform3fv(int location, int size, const float *value);
		state.set( "glsl_uniform3fv" , &glsl_uniform3fv );
		extern void glsl_uniform4fv(int location, int size, const float *value);
		state.set( "glsl_uniform4fv" , &glsl_uniform4fv );
		extern void glsl_uniform1iv(int location, int size, const float *value);
		state.set( "glsl_uniform1iv" , &glsl_uniform1iv );
		extern void glsl_uniform2iv(int location, int size, const float *value);
		state.set( "glsl_uniform2iv" , &glsl_uniform2iv );
		extern void glsl_uniform3iv(int location, int size, const float *value);
		state.set( "glsl_uniform3iv" , &glsl_uniform3iv );
		extern void glsl_uniform4iv(int location, int size, const float *value);
		state.set( "glsl_uniform4iv" , &glsl_uniform4iv );
		extern void glsl_uniform1uiv(int location, int size, const float *value);
		state.set( "glsl_uniform1uiv" , &glsl_uniform1uiv );
		extern void glsl_uniform2uiv(int location, int size, const float *value);
		state.set( "glsl_uniform2uiv" , &glsl_uniform2uiv );
		extern void glsl_uniform3uiv(int location, int size, const float *value);
		state.set( "glsl_uniform3uiv" , &glsl_uniform3uiv );
		extern void glsl_uniform4uiv(int location, int size, const float *value);
		state.set( "glsl_uniform4uiv" , &glsl_uniform4uiv );
		extern void glsl_uniform_matrix2fv(int location, int size, const float *matrix);
		state.set( "glsl_uniform_matrix2fv" , &glsl_uniform_matrix2fv );
		extern void glsl_uniform_matrix3fv(int location, int size, const float *matrix);
		state.set( "glsl_uniform_matrix3fv" , &glsl_uniform_matrix3fv );
		extern void glsl_uniform_matrix4fv(int location, int size, const float *matrix);
		state.set( "glsl_uniform_matrix4fv" , &glsl_uniform_matrix4fv );
		extern void glsl_attribute_enable(int location, bool enable);
		state.set( "glsl_attribute_enable" , &glsl_attribute_enable );
		extern void glsl_attribute_set(int location, int size, int type, bool normalize, int stride, int offset);
		state.set( "glsl_attribute_set" , &glsl_attribute_set );
		extern int net_ftp_open(string host, string user, string pass);
		state.set( "net_ftp_open" , &net_ftp_open );
		extern void net_ftp_send(int in, string file, string msg, int msglen);
		state.set( "net_ftp_send" , &net_ftp_send );
		extern void net_ftp_close(int in);
		state.set( "net_ftp_close" , &net_ftp_close );
		extern string net_http(string host, string loc);
		state.set( "net_http" , &net_http );
		extern bool net_init();
		state.set( "net_init" , &net_init );
		extern bool net_cleanup();
		state.set( "net_cleanup" , &net_cleanup );
		extern int net_connect(string addr, string port, bool server, bool udp);
		state.set( "net_connect" , &net_connect );
		extern int net_connect_tcp(string addr, string port, bool server);
		state.set( "net_connect_tcp" , &net_connect_tcp );
		extern int net_connect_udp(string localport, bool server);
		state.set( "net_connect_udp" , &net_connect_udp );
		extern int net_accept(int sock);
		state.set( "net_accept" , &net_accept );
		extern string net_receive(int sock);
		state.set( "net_receive" , &net_receive );
		extern int net_bounce(int sock);
		state.set( "net_bounce" , &net_bounce );
		extern int net_send_raw(int sock, string msg, int len);
		state.set( "net_send_raw" , &net_send_raw );
		extern int net_get_port(int sock);
		state.set( "net_get_port" , &net_get_port );
		extern int net_blocking(int sock, bool block);
		state.set( "net_blocking" , &net_blocking );
		extern void http_get(string url);
		state.set( "http_get" , &http_get );
		extern void http_get_file(string url, string directory);
		state.set( "http_get_file" , &http_get_file );
		extern void http_post_string(string url, string str);
		state.set( "http_post_string" , &http_post_string );
		extern void http_request(string url, string method, unsigned header, unsigned body);
		state.set( "http_request" , &http_request );
		extern int mplay_connect_status();
		state.set( "mplay_connect_status" , &mplay_connect_status );
		extern void mplay_end();
		state.set( "mplay_end" , &mplay_end );
		extern bool mplay_init_ipx();
		state.set( "mplay_init_ipx" , &mplay_init_ipx );
		extern bool mplay_init_modem(string initstr, string phonenr);
		state.set( "mplay_init_modem" , &mplay_init_modem );
		extern bool mplay_init_serial(unsigned portno, unsigned baudrate, unsigned stopbits, unsigned parity, unsigned flow);
		state.set( "mplay_init_serial" , &mplay_init_serial );
		extern bool mplay_init_tcpip(string addr);
		state.set( "mplay_init_tcpip" , &mplay_init_tcpip );
		extern string mplay_ipaddress();
		state.set( "mplay_ipaddress" , &mplay_ipaddress );
		extern unsigned mplay_player_find();
		state.set( "mplay_player_find" , &mplay_player_find );
		extern int mplay_player_id(string name);
		state.set( "mplay_player_id" , &mplay_player_id );
		extern string mplay_player_name(unsigned numb);
		state.set( "mplay_player_name" , &mplay_player_name );
		extern bool mplay_session_create(string sesname, unsigned playnumb, string playername);
		state.set( "mplay_session_create" , &mplay_session_create );
		extern void mplay_session_end();
		state.set( "mplay_session_end" , &mplay_session_end );
		extern unsigned mplay_session_find();
		state.set( "mplay_session_find" , &mplay_session_find );
		extern bool mplay_session_join(unsigned numb, string playername);
		state.set( "mplay_session_join" , &mplay_session_join );
		extern void mplay_session_mode(bool move);
		state.set( "mplay_session_mode" , &mplay_session_mode );
		extern string mplay_session_name(unsigned numb);
		state.set( "mplay_session_name" , &mplay_session_name );
		extern int mplay_session_status();
		state.set( "mplay_session_status" , &mplay_session_status );
		extern void mplay_data_mode(bool guar);
		state.set( "mplay_data_mode" , &mplay_data_mode );
		extern void mplay_message_clear();
		state.set( "mplay_message_clear" , &mplay_message_clear );
		extern unsigned mplay_message_count(string player);
		state.set( "mplay_message_count" , &mplay_message_count );
		extern unsigned mplay_message_id();
		state.set( "mplay_message_id" , &mplay_message_id );
		extern string mplay_message_name();
		state.set( "mplay_message_name" , &mplay_message_name );
		//extern variant mplay_message_value();
		//state.set( "mplay_message_value" , &mplay_message_value );
		extern unsigned mplay_message_player();
		state.set( "mplay_message_player" , &mplay_message_player );
		extern bool mplay_message_receive(string player);
		state.set( "mplay_message_receive" , &mplay_message_receive );
		extern int network_connect(int socket, string url, int port);
		state.set( "network_connect" , &network_connect );
		extern int network_conenct_raw(int socket, string url, int port);
		state.set( "network_conenct_raw" , &network_conenct_raw );
		extern int network_create_server(int type, int port, int clients);
		state.set( "network_create_server" , &network_create_server );
		extern int network_create_socket(int type);
		state.set( "network_create_socket" , &network_create_socket );
		extern void network_destroy(int socket);
		state.set( "network_destroy" , &network_destroy );
		extern string network_resolve(string url);
		state.set( "network_resolve" , &network_resolve );
		extern unsigned network_send_broadcast(int socket, int port, int buffer, unsigned size);
		state.set( "network_send_broadcast" , &network_send_broadcast );
		extern unsigned network_send_packet(int socket, int buffer, unsigned size);
		state.set( "network_send_packet" , &network_send_packet );
		extern unsigned network_send_raw(int socket, int buffer, unsigned size);
		state.set( "network_send_raw" , &network_send_raw );
		extern unsigned network_send_udp(int socket, string url, int port, int buffer, unsigned size);
		state.set( "network_send_udp" , &network_send_udp );
		extern void network_set_timeout(int socket, long read, long write);
		state.set( "network_set_timeout" , &network_set_timeout );*/
		//extern void windowsystem_write_exename(char* exenamehere);
		//state.set( "windowsystem_write_exename" , &windowsystem_write_exename );
		//extern void set_room_speed(int framerate);
		//state.set( "set_room_speed" , &set_room_speed );
		//extern void input_initialize();
		//state.set( "input_initialize" , &input_initialize );
		extern int window_mouse_get_x();
		state.set( "window_mouse_get_x" , &window_mouse_get_x );
		extern int window_mouse_get_y();
		state.set( "window_mouse_get_y" , &window_mouse_get_y );
		extern void window_view_mouse_set(int id, int x, int y);
		state.set( "window_view_mouse_set" , &window_view_mouse_set );
		extern void window_mouse_set(int x,int y);
		state.set( "window_mouse_set" , &window_mouse_set );
		extern int window_get_region_width_scaled();
		state.set( "window_get_region_width_scaled" , &window_get_region_width_scaled );
		extern int window_get_region_height_scaled();
		state.set( "window_get_region_height_scaled" , &window_get_region_height_scaled );
		extern void window_set_fullscreen(bool full);
		state.set( "window_set_fullscreen" , &window_set_fullscreen );
		extern bool window_get_fullscreen();
		state.set( "window_get_fullscreen" , &window_get_fullscreen );
		extern int window_set_cursor(int c);
		state.set( "window_set_cursor" , &window_set_cursor );
		extern void sleep(int ms);
		state.set( "sleep" , &sleep );
		/*extern long int current_time();
		state.set( "current_time" , &current_time );
		extern bool device_mouse_check_button(int device, int button);
		state.set( "device_mouse_check_button" , &device_mouse_check_button );
		extern bool device_mouse_check_button_pressed(int device, int button);
		state.set( "device_mouse_check_button_pressed" , &device_mouse_check_button_pressed );
		extern bool device_mouse_check_button_released(int device, int button);
		state.set( "device_mouse_check_button_released" , &device_mouse_check_button_released );
		extern void device_mouse_dbclick_enable(bool enable);
		state.set( "device_mouse_dbclick_enable" , &device_mouse_dbclick_enable );
		extern int device_mouse_x(int device);
		state.set( "device_mouse_x" , &device_mouse_x );
		extern int device_mouse_y(int device);
		state.set( "device_mouse_y" , &device_mouse_y );
		extern int device_mouse_raw_x(int device);
		state.set( "device_mouse_raw_x" , &device_mouse_raw_x );
		extern int device_mouse_raw_y(int device);
		state.set( "device_mouse_raw_y" , &device_mouse_raw_y );
		extern int device_mouse_x_to_gui(int device);
		state.set( "device_mouse_x_to_gui" , &device_mouse_x_to_gui );
		extern int device_mouse_y_to_gui(int device);
		state.set( "device_mouse_y_to_gui" , &device_mouse_y_to_gui );
		extern bool device_is_keypad_open();
		state.set( "device_is_keypad_open" , &device_is_keypad_open );
		extern float device_get_tilt_x();
		state.set( "device_get_tilt_x" , &device_get_tilt_x );
		extern float device_get_tilt_y();
		state.set( "device_get_tilt_y" , &device_get_tilt_y );
		extern float device_get_tilt_z();
		state.set( "device_get_tilt_z" , &device_get_tilt_z );*/
		extern long long file_size(std::string fname);
		state.set( "file_size" , &file_size );
		extern time_t file_access_time(std::string fname);
		state.set( "file_access_time" , &file_access_time );
		extern time_t file_modified_time(std::string fname);
		state.set( "file_modified_time" , &file_modified_time );
		extern int file_exists(std::string fname);
		state.set( "file_exists" , &file_exists );
		extern int file_delete(std::string fname);
		state.set( "file_delete" , &file_delete );
		extern int file_rename(std::string oldname,std::string newname);
		state.set( "file_rename" , &file_rename );
		extern int file_copy(std::string fname,std::string newname);
		state.set( "file_copy" , &file_copy );
		extern int directory_exists(std::string dname);
		state.set( "directory_exists" , &directory_exists );
		extern int directory_create(std::string dname);
		state.set( "directory_create" , &directory_create );
		extern int directory_delete(std::string dname);
		state.set( "directory_delete" , &directory_delete );
		extern std::string file_find_next();
		state.set( "file_find_next" , &file_find_next );
		extern void file_find_close();
		state.set( "file_find_close" , &file_find_close );
		extern std::string file_find_first(std::string mask,int attr);
		state.set( "file_find_first" , &file_find_first );
		extern bool file_attributes(std::string fname,int attributes);
		state.set( "file_attributes" , &file_attributes );
		/*extern void export_include_file(std::string fname);
		state.set( "export_include_file" , &export_include_file );
		extern void export_include_file_location(std::string fname,std::string location);
		state.set( "export_include_file_location" , &export_include_file_location );
		extern void discard_include_file(std::string fname);
		state.set( "discard_include_file" , &discard_include_file );*/
		extern void ini_open(std::string fname);
		state.set( "ini_open" , &ini_open );
		extern void ini_close();
		state.set( "ini_close" , &ini_close );
		extern std::string ini_read_string(std::string section, std::string key, std::string defaultValue);
		state.set( "ini_read_string" , &ini_read_string );
		extern float ini_read_real(std::string section, std::string key, float defaultValue);
		state.set( "ini_read_real" , &ini_read_real );
		extern void ini_write_string(std::string section, std::string key, std::string value);
		state.set( "ini_write_string" , &ini_write_string );
		extern void ini_write_real(std::string section, std::string key, float value);
		state.set( "ini_write_real" , &ini_write_real );
		extern bool ini_key_exists(std::string section, std::string key);
		state.set( "ini_key_exists" , &ini_key_exists );
		extern bool ini_section_exists(std::string section);
		state.set( "ini_section_exists" , &ini_section_exists );
		extern void ini_key_delete(std::string section, std::string key);
		state.set( "ini_key_delete" , &ini_key_delete );
		extern void ini_section_delete(std::string section);
		state.set( "ini_section_delete" , &ini_section_delete );
		/*extern bool joystick_load(int id);
		state.set( "joystick_load" , &joystick_load );
		extern bool joystick_exists(int id);
		state.set( "joystick_exists" , &joystick_exists );
		extern string joystick_name(int id);
		state.set( "joystick_name" , &joystick_name );
		extern int joystick_axes(int id);
		state.set( "joystick_axes" , &joystick_axes );
		extern int joystick_buttons(int id);
		state.set( "joystick_buttons" , &joystick_buttons );
		extern bool joystick_has_pov(int id);
		state.set( "joystick_has_pov" , &joystick_has_pov );
		extern double joystick_pov(int id, int axis1, int axis2);
		state.set( "joystick_pov" , &joystick_pov );
		extern double joystick_axis(int id, int axis);
		state.set( "joystick_axis" , &joystick_axis );
		extern bool joystick_button(int id, int button);
		state.set( "joystick_button" , &joystick_button );
		extern void joystick_map_button(int id, int butnum, char key);
		state.set( "joystick_map_button" , &joystick_map_button );
		extern void joystick_map_axis(int id, int axisnum, char keyneg, char keypos);
		state.set( "joystick_map_axis" , &joystick_map_axis );*/
		extern void action_end_game();
		state.set( "action_end_game" , &action_end_game );
		extern void action_webpage(const std::string &url);
		state.set( "action_webpage" , &action_webpage );
		extern string parameter_string(int x);
		state.set( "parameter_string" , &parameter_string );
		extern int parameter_count();
		state.set( "parameter_count" , &parameter_count );
		extern unsigned long long disk_size(std::string drive);
		state.set( "disk_size" , &disk_size );
		extern unsigned long long disk_free(std::string drive);
		state.set( "disk_free" , &disk_free );
		extern void set_program_priority(int value);
		state.set( "set_program_priority" , &set_program_priority );
		extern void execute_shell(std::string fname, std::string args);
		state.set( "execute_shell" , &execute_shell );
		extern void execute_program(std::string fname, std::string args, bool wait);
		state.set( "execute_program" , &execute_program );
		extern std::string environment_get_variable(std::string name);
		state.set( "environment_get_variable" , &environment_get_variable );
		extern void registry_write_string(std::string name, std::string str);
		state.set( "registry_write_string" , &registry_write_string );
		extern void registry_write_real(std::string name, int x);
		state.set( "registry_write_real" , &registry_write_real );
		extern std::string registry_read_string(std::string name);
		state.set( "registry_read_string" , &registry_read_string );
		extern int registry_read_real(std::string name);
		state.set( "registry_read_real" , &registry_read_real );
		extern bool registry_exists(std::string name);
		state.set( "registry_exists" , &registry_exists );
		extern void registry_write_string_ext(std::string key, std::string name, std::string str);
		state.set( "registry_write_string_ext" , &registry_write_string_ext );
		extern void registry_write_real_ext(std::string key, std::string name, int x);
		state.set( "registry_write_real_ext" , &registry_write_real_ext );
		extern std::string registry_read_string_ext(std::string key, std::string name);
		state.set( "registry_read_string_ext" , &registry_read_string_ext );
		extern int registry_read_real_ext(std::string key, std::string name);
		state.set( "registry_read_real_ext" , &registry_read_real_ext );
		extern bool registry_exists_ext(std::string key, std::string name);
		state.set( "registry_exists_ext" , &registry_exists_ext );
		extern void registry_set_root(int root);
		state.set( "registry_set_root" , &registry_set_root );
		extern int thread_start(int thread);
		state.set( "thread_start" , &thread_start );
		extern void thread_join(int thread);
		state.set( "thread_join" , &thread_join );
		extern void thread_delete(int thread);
		state.set( "thread_delete" , &thread_delete );
		extern bool thread_exists(int thread);
		state.set( "thread_exists" , &thread_exists );
		extern bool thread_get_finished(int thread);
		state.set( "thread_get_finished" , &thread_get_finished );
		extern void io_handle();
		state.set( "io_handle" , &io_handle );
		extern void io_clear();
		state.set( "io_clear" , &io_clear );
		extern void keyboard_wait();
		state.set( "keyboard_wait" , &keyboard_wait );
		extern void mouse_wait();
		state.set( "mouse_wait" , &mouse_wait );
		extern void keyboard_clear(const int key);
		state.set( "keyboard_clear" , &keyboard_clear );
		extern bool keyboard_check_direct(int key);
		state.set( "keyboard_check_direct" , &keyboard_check_direct );
		extern void keyboard_key_press(int key);
		state.set( "keyboard_key_press" , &keyboard_key_press );
		extern void keyboard_key_release(int key);
		state.set( "keyboard_key_release" , &keyboard_key_release );
		extern bool keyboard_get_numlock();
		state.set( "keyboard_get_numlock" , &keyboard_get_numlock );
		extern bool keyboard_get_capital();
		state.set( "keyboard_get_capital" , &keyboard_get_capital );
		extern bool keyboard_get_scroll();
		state.set( "keyboard_get_scroll" , &keyboard_get_scroll );
		extern void keyboard_set_numlock(bool on);
		state.set( "keyboard_set_numlock" , &keyboard_set_numlock );
		extern void keyboard_set_capital(bool on);
		state.set( "keyboard_set_capital" , &keyboard_set_capital );
		extern void keyboard_set_scroll(bool on);
		state.set( "keyboard_set_scroll" , &keyboard_set_scroll );
		extern void keyboard_set_map(int key1, int key2);
		state.set( "keyboard_set_map" , &keyboard_set_map );
		extern int keyboard_get_map(int key);
		state.set( "keyboard_get_map" , &keyboard_get_map );
		extern void keyboard_unset_map();
		state.set( "keyboard_unset_map" , &keyboard_unset_map );
		extern void mouse_clear(const int button);
		state.set( "mouse_clear" , &mouse_clear );
		extern int display_mouse_get_x();
		state.set( "display_mouse_get_x" , &display_mouse_get_x );
		extern int display_mouse_get_y();
		state.set( "display_mouse_get_y" , &display_mouse_get_y );
		extern void display_mouse_set(int x,int y);
		state.set( "display_mouse_set" , &display_mouse_set );
		extern int display_get_width();
		state.set( "display_get_width" , &display_get_width );
		extern int display_get_height();
		state.set( "display_get_height" , &display_get_height );
		extern int display_get_colordepth();
		state.set( "display_get_colordepth" , &display_get_colordepth );
		extern int display_get_frequency();
		state.set( "display_get_frequency" , &display_get_frequency );
		//extern int display_get_orientation();
		//state.set( "display_get_orientation" , &display_get_orientation );
		extern unsigned display_get_dpi_x();
		state.set( "display_get_dpi_x" , &display_get_dpi_x );
		extern unsigned display_get_dpi_y();
		state.set( "display_get_dpi_y" , &display_get_dpi_y );
		extern void display_reset(int samples, bool vsync);
		state.set( "display_reset" , &display_reset );
		extern bool display_set_colordepth(int depth);
		state.set( "display_set_colordepth" , &display_set_colordepth );
		extern bool display_set_size(int w, int h);
		state.set( "display_set_size" , &display_set_size );
		extern bool display_set_frequency(int freq);
		state.set( "display_set_frequency" , &display_set_frequency );
		extern bool display_set_all(int w, int h, int freq, int bitdepth);
		state.set( "display_set_all" , &display_set_all );
		extern bool display_test_all(int w, int h, int freq, int bitdepth);
		state.set( "display_test_all" , &display_test_all );
		extern void set_synchronization(bool enable);
		state.set( "set_synchronization" , &set_synchronization );
		extern int window_get_x();
		state.set( "window_get_x" , &window_get_x );
		extern int window_get_y();
		state.set( "window_get_y" , &window_get_y );
		extern int window_get_width();
		state.set( "window_get_width" , &window_get_width );
		extern int window_get_height();
		state.set( "window_get_height" , &window_get_height );
		extern void window_set_caption(string caption);
		state.set( "window_set_caption" , &window_set_caption );
		extern string window_get_caption();
		state.set( "window_get_caption" , &window_get_caption );
		extern void window_set_color(int color);
		state.set( "window_set_color" , &window_set_color );
		extern int window_get_color();
		state.set( "window_get_color" , &window_get_color );
		extern void window_set_alpha(double alpha);
		state.set( "window_set_alpha" , &window_set_alpha );
		extern double window_get_alpha();
		state.set( "window_get_alpha" , &window_get_alpha );
		extern double window_get_region_scale();
		state.set( "window_get_region_scale" , &window_get_region_scale );
		extern void window_set_position(int x, int y);
		state.set( "window_set_position" , &window_set_position );
		extern void window_set_size(unsigned int width, unsigned int height);
		state.set( "window_set_size" , &window_set_size );
		extern void window_set_rectangle(int x, int y, int width, int height);
		state.set( "window_set_rectangle" , &window_set_rectangle );
		extern void window_center();
		state.set( "window_center" , &window_center );
		extern void window_default(bool center_size);
		state.set( "window_default" , &window_default );
		extern void window_set_region_size(int w, int h, bool adaptwindow);
		state.set( "window_set_region_size" , &window_set_region_size );
		extern int window_get_region_width();
		state.set( "window_get_region_width" , &window_get_region_width );
		extern int window_get_region_height();
		state.set( "window_get_region_height" , &window_get_region_height );
		extern int window_get_region_width_scaled();
		state.set( "window_get_region_width_scaled" , &window_get_region_width_scaled );
		extern int window_get_region_height_scaled();
		state.set( "window_get_region_height_scaled" , &window_get_region_height_scaled );
		extern void window_set_minimized(bool minimized);
		state.set( "window_set_minimized" , &window_set_minimized );
		extern void window_set_visible(bool visible);
		state.set( "window_set_visible" , &window_set_visible );
		extern int window_get_visible();
		state.set( "window_get_visible" , &window_get_visible );
		extern bool window_get_stayontop();
		state.set( "window_get_stayontop" , &window_get_stayontop );
		extern bool window_get_sizeable();
		state.set( "window_get_sizeable" , &window_get_sizeable );
		extern bool window_get_showborder();
		state.set( "window_get_showborder" , &window_get_showborder );
		extern bool window_get_showicons();
		state.set( "window_get_showicons" , &window_get_showicons );
		extern bool window_get_freezeonlosefocus();
		state.set( "window_get_freezeonlosefocus" , &window_get_freezeonlosefocus );
		extern bool window_get_minimized();
		state.set( "window_get_minimized" , &window_get_minimized );
		extern int window_mouse_get_x();
		state.set( "window_mouse_get_x" , &window_mouse_get_x );
		extern int window_mouse_get_y();
		state.set( "window_mouse_get_y" , &window_mouse_get_y );
		extern int window_view_mouse_get_x(int id);
		state.set( "window_view_mouse_get_x" , &window_view_mouse_get_x );
		extern int window_view_mouse_get_y(int id);
		state.set( "window_view_mouse_get_y" , &window_view_mouse_get_y );
		extern string clipboard_get_text();
		state.set( "clipboard_get_text" , &clipboard_get_text );
		extern void clipboard_set_text(string text);
		state.set( "clipboard_set_text" , &clipboard_set_text );
		extern bool clipboard_has_text();
		state.set( "clipboard_has_text" , &clipboard_has_text );
		extern unsigned long long window_handle();
		state.set( "window_handle" , &window_handle );
		//extern int sleep(int millis);
		state.set( "sleep" , &sleep );
		//extern void joystick_map_button(int id, int butnum, char key);
		//state.set( "joystick_map_button" , &joystick_map_button );
		//extern void joystick_map_axis(int id, int axisnum, char keyneg, char keypos);
		//state.set( "joystick_map_axis" , &joystick_map_axis );
		extern void action_create_object_random(const int object1, const int object2, const int object3, const int object4, const double x, const double y);
		state.set( "action_create_object_random" , &action_create_object_random );
		extern void action_create_object_random(const int object1, const int object2, const int object3, const int object4, const double x, const double y);
		state.set( "action_create_object_random" , &action_create_object_random );
		extern void background_save(int back, std::string fname);
		state.set( "background_save" , &background_save );
		extern int background_duplicate(int back);
		state.set( "background_duplicate" , &background_duplicate );
		extern bool background_exists(int back);
		state.set( "background_exists" , &background_exists );
		extern int background_get_texture(int backId);
		state.set( "background_get_texture" , &background_get_texture );
		extern int background_get_width(int backId);
		state.set( "background_get_width" , &background_get_width );
		extern int background_get_height(int backId);
		state.set( "background_get_height", &background_get_height);
		extern int buffer_create(unsigned size, int type, unsigned alignment);
		state.set( "buffer_create" , &buffer_create );
		extern void buffer_delete(int buffer);
		state.set( "buffer_delete" , &buffer_delete );
		extern void buffer_copy(int src_buffer, unsigned src_offset, unsigned size, int dest_buffer, unsigned dest_offset);
		state.set( "buffer_copy" , &buffer_copy );
		extern void buffer_save(int buffer, string filename);
		state.set( "buffer_save" , &buffer_save );
		extern void buffer_save_ext(int buffer, string filename, unsigned offset, unsigned size);
		state.set( "buffer_save_ext" , &buffer_save_ext );
		extern int buffer_load(string filename);
		state.set( "buffer_load" , &buffer_load );
		extern void buffer_load_ext(int buffer, string filename, unsigned offset);
		state.set( "buffer_load_ext" , &buffer_load_ext );
		extern int buffer_base64_decode(string str);
		state.set( "buffer_base64_decode" , &buffer_base64_decode );
		extern int buffer_base64_decode_ext(int buffer, string str, unsigned offset);
		state.set( "buffer_base64_decode_ext" , &buffer_base64_decode_ext );
		extern string buffer_base64_encode(int buffer, unsigned offset, unsigned size);
		state.set( "buffer_base64_encode" , &buffer_base64_encode );
		extern string buffer_md5(int buffer, unsigned offset, unsigned size);
		state.set( "buffer_md5" , &buffer_md5 );
		extern string buffer_sha1(int buffer, unsigned offset, unsigned size);
		state.set( "buffer_sha1" , &buffer_sha1 );
		extern unsigned buffer_get_size(int buffer);
		state.set( "buffer_get_size" , &buffer_get_size );
		extern unsigned buffer_get_alignment(int buffer);
		state.set( "buffer_get_alignment" , &buffer_get_alignment );
		extern int buffer_get_type(int buffer);
		state.set( "buffer_get_type" , &buffer_get_type );
		extern void buffer_get_surface(int buffer, int surface, int mode, unsigned offset, int modulo);
		state.set( "buffer_get_surface" , &buffer_get_surface );
		extern void buffer_resize(int buffer, unsigned size);
		state.set( "buffer_resize" , &buffer_resize );
		extern void buffer_seek(int buffer, int base, unsigned offset);
		state.set( "buffer_seek" , &buffer_seek );
		extern unsigned buffer_sizeof(int type);
		state.set( "buffer_sizeof" , &buffer_sizeof );
		extern int buffer_tell(int buffer);
		state.set( "buffer_tell" , &buffer_tell );
		//extern variant buffer_peek(int buffer, unsigned offset, int type);
		//state.set( "buffer_peek" , &buffer_peek );
		//extern variant buffer_read(int buffer, int type);
		//state.set( "buffer_read" , &buffer_read );
		//extern void buffer_fill(int buffer, unsigned offset, int type, variant value, unsigned size);
		//state.set( "buffer_fill" , &buffer_fill );
		//extern void buffer_poke(int buffer, unsigned offset, int type, variant value);
		//state.set( "buffer_poke" , &buffer_poke );
		//extern void buffer_write(int buffer, int type, variant value);
		//state.set( "buffer_write" , &buffer_write );
		//extern void game_save_buffer(int buffer);
		//state.set( "game_save_buffer" , &game_save_buffer );
		extern void game_load_buffer(int buffer);
		state.set( "game_load_buffer" , &game_load_buffer );
		extern bool mouse_check_button(int button);
		state.set( "mouse_check_button" , &mouse_check_button );
		extern bool mouse_check_button_pressed(int button);
		state.set( "mouse_check_button_pressed" , &mouse_check_button_pressed );
		extern bool mouse_check_button_released(int button);
		state.set( "mouse_check_button_released" , &mouse_check_button_released );
		extern bool keyboard_check(int key);
		state.set( "keyboard_check" , &keyboard_check );
		extern bool keyboard_check_pressed(int key);
		state.set( "keyboard_check_pressed" , &keyboard_check_pressed );
		extern bool keyboard_check_released(int key);
		state.set( "keyboard_check_released" , &keyboard_check_released );
		extern bool mouse_wheel_up();
		state.set( "mouse_wheel_up" , &mouse_wheel_up );
		extern bool mouse_wheel_down();
		state.set( "mouse_wheel_down" , &mouse_wheel_down );
		extern void io_clear();
		state.set( "io_clear" , &io_clear );
		extern string base64_encode(string const& str);
		state.set( "base64_encode" , &base64_encode );
		extern string base64_decode(string const& str);
		state.set( "base64_decode" , &base64_decode );
		extern bool is_base64(unsigned char byte);
		state.set( "is_base64" , &is_base64 );
		//extern bool is_string(variant val);
		//state.set( "is_string" , &is_string );
		//extern bool is_real(variant val);
		//state.set( "is_real" , &is_real );
		extern string ansi_char(char byte);
		state.set( "ansi_char" , &ansi_char );
		extern string chr(char val);
		state.set( "chr" , &chr );
		extern int ord(string str);
		state.set( "ord" , &ord );
		//extern double real(variant str);
		//state.set( "real" , &real );
		extern size_t string_length(string str);
		state.set( "string_length" , &string_length );
		extern size_t string_length_utf8(const char* str);
		state.set( "string_length_utf8" , &string_length_utf8 );
		extern int string_pos(string substr,string str);
		state.set( "string_pos" , &string_pos );
		extern string string_format(double val, unsigned tot, unsigned dec);
		state.set( "string_format" , &string_format );
		extern string string_copy(string str, int index,int count);
		state.set( "string_copy" , &string_copy );
		extern string string_set_byte_at(string str, int pos, char byte);
		state.set( "string_set_byte_at" , &string_set_byte_at );
		extern char string_byte_at(string str, int index);
		state.set( "string_byte_at" , &string_byte_at );
		extern string string_char_at(string str,int index);
		state.set( "string_char_at" , &string_char_at );
		extern string string_delete(string str,int index,int count);
		state.set( "string_delete" , &string_delete );
		extern string string_insert(string substr,string str,int index);
		state.set( "string_insert" , &string_insert );
		extern string string_replace(string str,string substr,string newstr);
		state.set( "string_replace" , &string_replace );
		extern string string_replace_all(string str,string substr,string newstr);
		state.set( "string_replace_all" , &string_replace_all );
		extern int string_count(string substr, string str);
		state.set( "string_count" , &string_count );
		extern string string_lower(string str);
		state.set( "string_lower" , &string_lower );
		extern string string_upper(string str);
		state.set( "string_upper" , &string_upper );
		extern string string_repeat(string str,int count);
		state.set( "string_repeat" , &string_repeat );
		extern string string_letters(string str);
		state.set( "string_letters" , &string_letters );
		extern string string_digits(string str);
		state.set( "string_digits" , &string_digits );
		extern string string_lettersdigits(string str);
		state.set( "string_lettersdigits" , &string_lettersdigits );
		extern bool string_isletters(string str);
		state.set( "string_isletters" , &string_isletters );
		extern bool string_isdigits(string str);
		state.set( "string_isdigits" , &string_isdigits );
		extern bool string_islettersdigits(string str);
		state.set( "string_islettersdigits" , &string_islettersdigits );
		extern string filename_name(string fname);
		state.set( "filename_name" , &filename_name );
		extern string filename_path(string fname);
		state.set( "filename_path" , &filename_path );
		extern string filename_dir(string fname);
		state.set( "filename_dir" , &filename_dir );
		extern string filename_drive(string fname);
		state.set( "filename_drive" , &filename_drive );
		extern string filename_ext(string fname);
		state.set( "filename_ext" , &filename_ext );
		extern string filename_change_ext(string fname, string newext);
		state.set( "filename_change_ext" , &filename_change_ext );
		extern int     file_text_open_read(string fname);
		state.set( "file_text_open_read" , &file_text_open_read );
		extern int     file_text_open_write(string fname);
		state.set( "file_text_open_write" , &file_text_open_write );
		extern int     file_text_open_append(string fname);
		state.set( "file_text_open_append" , &file_text_open_append );
		extern void    file_text_close(int fileid);
		state.set( "file_text_close" , &file_text_close );
		extern void    file_text_write_string(int fileid, string str);
		state.set( "file_text_write_string" , &file_text_write_string );
		extern void    file_text_write_real(int fileid, double x);
		state.set( "file_text_write_real" , &file_text_write_real );
		extern void    file_text_writeln(int fileid);
		state.set( "file_text_writeln" , &file_text_writeln );
		extern string file_text_read_string(int fileid);
		state.set( "file_text_read_string" , &file_text_read_string );
		extern string file_text_read_all(int fileid);
		state.set( "file_text_read_all" , &file_text_read_all );
		extern double  file_text_read_real(int fileid);
		state.set( "file_text_read_real" , &file_text_read_real );
		extern void    file_text_readln(int fileid);
		state.set( "file_text_readln" , &file_text_readln );
		extern bool    file_text_eof(int fileid);
		state.set( "file_text_eof" , &file_text_eof );
		extern bool file_text_eoln(int fileid);
		state.set( "file_text_eoln" , &file_text_eoln );
		extern void load_info(string fname);
		state.set( "load_info" , &load_info );
		extern int     file_bin_open(string fname,int mode);
		state.set( "file_bin_open" , &file_bin_open );
		extern bool    file_bin_rewrite(int fileid);
		state.set( "file_bin_rewrite" , &file_bin_rewrite );
		extern void    file_bin_close(int fileid);
		state.set( "file_bin_close" , &file_bin_close );
		extern size_t  file_bin_size(int fileid);
		state.set( "file_bin_size" , &file_bin_size );
		extern size_t  file_bin_position(int fileid);
		state.set( "file_bin_position" , &file_bin_position );
		extern void    file_bin_seek(int fileid,size_t pos);
		state.set( "file_bin_seek" , &file_bin_seek );
		extern void    file_bin_write_byte(int fileid,unsigned char byte);
		state.set( "file_bin_write_byte" , &file_bin_write_byte );
		extern int     file_bin_read_byte(int fileid);
		state.set( "file_bin_read_byte" , &file_bin_read_byte );
		extern int font_add(string name, int size, bool bold, bool italic, uint32_t first, uint32_t last);
		state.set( "font_add" , &font_add );
		extern bool font_replace(int ind, string name, int size, bool bold, bool italic, uint32_t first, uint32_t last);
		state.set( "font_replace" , &font_replace );
		extern int  font_add_sprite(int spr, uint32_t first, bool prop, int sep);
		state.set( "font_add_sprite" , &font_add_sprite );
		extern bool font_replace_sprite(int ind, int spr, uint32_t first, bool prop, int sep);
		state.set( "font_replace_sprite" , &font_replace_sprite );
		extern bool font_get_bold(int fnt);
		state.set( "font_get_bold" , &font_get_bold );
		extern bool font_get_italic(int fnt);
		state.set( "font_get_italic" , &font_get_italic );
		extern int font_get_size(int fnt);
		state.set( "font_get_size" , &font_get_size );
		extern int font_get_range_count(int fnt);
		state.set( "font_get_range_count" , &font_get_range_count );
		/*extern float font_get_glyph_left(int fnt, uint32_t character);
		state.set( "font_get_glyph_left" , &font_get_glyph_left );
		extern float font_get_glyph_right(int fnt, uint32_t character);
		state.set( "font_get_glyph_right" , &font_get_glyph_right );
		extern float font_get_glyph_top(int fnt, uint32_t character);
		state.set( "font_get_glyph_top" , &font_get_glyph_top );
		extern float font_get_glyph_bottom(int fnt, uint32_t character);
		state.set( "font_get_glyph_bottom" , &font_get_glyph_bottom );*/
		extern string font_get_fontname(int fnt);
		state.set( "font_get_fontname" , &font_get_fontname );
		extern void font_delete(int fnt);
		state.set( "font_delete" , &font_delete );
		extern bool font_exists(int fnt);
		state.set( "font_exists" , &font_exists );
		extern void highscore_show(int numb);
		state.set( "highscore_show" , &highscore_show );
		extern void action_highscore_show(int background,int border,double newColor,double otherColor,std::string font,int a,int b,int c,int d,int e,int f);
		state.set( "action_highscore_show" , &action_highscore_show );
		extern void highscore_set_background(int back) ;
		state.set( "highscore_set_background" , &highscore_set_background );
		extern void highscore_set_border(bool show) ;
		state.set( "highscore_set_border" , &highscore_set_border );
		extern void highscore_set_font(std::string name, int size, int style) ;
		state.set( "highscore_set_font" , &highscore_set_font );
		extern void highscore_set_colors(int back, int newcol, int othercol) ;
		state.set( "highscore_set_colors" , &highscore_set_colors );
		extern void highscore_set_strings(std::string caption, std::string nobody, std::string escape) ;
		state.set( "highscore_set_strings" , &highscore_set_strings );
		extern void highscore_show_ext(int numb, int back, int show, int newcol, int othercol, std::string name, int size) ;
		state.set( "highscore_show_ext" , &highscore_show_ext );
		extern void highscore_clear() ;
		state.set( "highscore_clear" , &highscore_clear );
		extern void highscore_add(std::string str, int numb) ;
		state.set( "highscore_add" , &highscore_add );
		extern void highscore_add_current() ;
		state.set( "highscore_add_current" , &highscore_add_current );
		extern int highscore_value(int place);
		state.set( "highscore_value" , &highscore_value );
		extern std::string highscore_name(int place) ;
		state.set( "highscore_name" , &highscore_name );
		extern void draw_highscore(int x1, int y1, int x2, int y2) ;
		state.set( "draw_highscore" , &draw_highscore );
		//extern void highscore_init();
		//state.set( "highscore_init" , &highscore_init );
		extern enigma::instance_t instance_create(int x,int y,int object);
		state.set( "instance_create" , &instance_create );
		extern void instance_deactivate_all(bool notme);
		state.set( "instance_deactivate_all" , &instance_deactivate_all );
		extern void instance_activate_all();
		state.set( "instance_activate_all" , &instance_activate_all );
		extern void instance_activate_object(int obj);
		state.set( "instance_activate_object" , &instance_activate_object );
		extern void instance_deactivate_object(int obj);
		state.set( "instance_deactivate_object" , &instance_deactivate_object );
		extern void instance_destroy();
		state.set( "instance_destroy" , &instance_destroy );
		extern bool instance_exists (int obj);
		state.set( "instance_exists" , &instance_exists);
		extern enigma::instance_t instance_find(int obj,int n);
		state.set( "instance_find" , &instance_find );
		extern int instance_number (int obj);
		state.set( "instance_number " , &instance_number );
		extern enigma::instance_t instance_last(int obj);
		state.set( "instance_last" , &instance_last );
		//extern void instance_change_inst(int obj, bool perf, enigma::object_graphics* inst);
		//state.set( "instance_change_inst" , &instance_change_inst );
		extern enigma::instance_t instance_create(int x,int y,int object);
		state.set( "instance_create" , &instance_create );
		extern void instance_copy(bool perf);
		state.set( "instance_copy" , &instance_copy );
		//extern ma_scalar abs(const variant& x);
		//state.set( "abs" , &abs );
		//extern ma_scalar abs(const var& x);
		extern ma_scalar sqr(ma_scalar x);
		state.set( "sqr" , &sqr );
		extern ma_scalar logn(ma_scalar n,ma_scalar x);
		state.set( "logn" , &logn );
		extern ma_scalar sind(ma_scalar x);
		state.set( "sind" , &sind );
		extern ma_scalar cosd(ma_scalar x);
		state.set( "cosd" , &cosd );
		extern ma_scalar tand(ma_scalar x);
		state.set( "tand" , &tand );
		extern ma_scalar asind(ma_scalar x);
		state.set( "asind" , &asind );
		extern ma_scalar acosd(ma_scalar x);
		state.set( "acosd" , &acosd );
		extern ma_scalar atand(ma_scalar x);
		state.set( "atand" , &atand );
		extern ma_scalar atand2(ma_scalar y,ma_scalar x);
		state.set( "atand2" , &atand2 );
		extern ma_scalar arcsind(ma_scalar x);
		state.set( "arcsind" , &arcsind );
		extern ma_scalar arccosd(ma_scalar x);
		state.set( "arccosd" , &arccosd );
		extern ma_scalar arctand(ma_scalar x);
		state.set( "arctand" , &arctand );
		extern ma_scalar arctand2(ma_scalar y,ma_scalar x);
		state.set( "arctand2" , &arctand2 );
		extern int sign(ma_scalar x);
		state.set( "sign" , &sign );
		extern int cmp(ma_scalar x,ma_scalar y);
		state.set( "cmp" , &cmp );
		extern ma_scalar frac(ma_scalar x);
		state.set( "frac" , &frac );
		extern ma_scalar degtorad(ma_scalar x);
		state.set( "degtorad" , &degtorad );
		extern ma_scalar radtodeg(ma_scalar x);
		state.set( "radtodeg" , &radtodeg );
		extern ma_scalar lengthdir_x(ma_scalar len,ma_scalar dir);
		state.set( "lengthdir_x" , &lengthdir_x );
		extern ma_scalar lengthdir_y(ma_scalar len,ma_scalar dir);
		state.set( "lengthdir_y" , &lengthdir_y );
		extern ma_scalar angle_difference(ma_scalar dir1,ma_scalar dir2);
		state.set( "angle_difference" , &angle_difference );
		extern ma_scalar point_direction(ma_scalar x1,ma_scalar y1,ma_scalar x2,ma_scalar y2);
		state.set( "point_direction" , &point_direction );
		extern ma_scalar point_distance(ma_scalar x1,ma_scalar y1,ma_scalar x2,ma_scalar y2);
		state.set( "point_distance" , &point_distance );
		extern ma_scalar point_distance_3d(ma_scalar x1,ma_scalar y1,ma_scalar z1,ma_scalar x2,ma_scalar y2,ma_scalar z2);
		state.set( "point_distance_3d" , &point_distance_3d );
		//extern ma_scalar triangle_area(ma_scalar x1, ma_scalar y1, ma_scalar x2, ma_scalar y2, ma_scalar x3, ma_scalar y3);
		//state.set( "triangle_area" , &triangle_area );
		extern bool point_in_circle(ma_scalar px, ma_scalar py, ma_scalar x1, ma_scalar y1, ma_scalar rad);
		state.set( "point_in_circle" , &point_in_circle );
		extern bool point_in_rectangle(ma_scalar px, ma_scalar py, ma_scalar x1, ma_scalar y1, ma_scalar x2, ma_scalar y2);
		state.set( "point_in_rectangle" , &point_in_rectangle );
		extern bool point_in_triangle(ma_scalar px, ma_scalar py, ma_scalar x1, ma_scalar y1, ma_scalar x2, ma_scalar y2, ma_scalar x3, ma_scalar y3);
		state.set( "point_in_triangle" , &point_in_triangle );
		extern ma_scalar lines_intersect(ma_scalar x1, ma_scalar y1, ma_scalar x2, ma_scalar y2, ma_scalar x3, ma_scalar y3, ma_scalar x4, ma_scalar y4, bool segment);
		state.set( "lines_intersect" , &lines_intersect );
		extern int rectangle_in_circle(ma_scalar sx1, ma_scalar sy1, ma_scalar sx2, ma_scalar sy2, ma_scalar x, ma_scalar y, ma_scalar rad);
		state.set( "rectangle_in_circle" , &rectangle_in_circle );
		extern int rectangle_in_rectangle(ma_scalar sx1, ma_scalar sy1, ma_scalar sx2, ma_scalar sy2, ma_scalar dx1, ma_scalar dy1, ma_scalar dx2, ma_scalar dy2);
		state.set( "rectangle_in_rectangle" , &rectangle_in_rectangle );
		extern int rectangle_in_triangle(ma_scalar sx1, ma_scalar sy1, ma_scalar sx2, ma_scalar sy2, ma_scalar x1, ma_scalar y1, ma_scalar x2, ma_scalar y2, ma_scalar x3, ma_scalar y3);
		state.set( "rectangle_in_triangle" , &rectangle_in_triangle );
		extern ma_scalar dot_product(ma_scalar x1, ma_scalar y1, ma_scalar x2, ma_scalar y2);
		state.set( "dot_product" , &dot_product );
		extern ma_scalar dot_product_3d(ma_scalar x1,ma_scalar y1,ma_scalar z1,ma_scalar x2,ma_scalar y2, ma_scalar z2);
		state.set( "dot_product_3d" , &dot_product_3d );
		extern ma_scalar dot_product_normalised(ma_scalar x1,ma_scalar y1,ma_scalar x2,ma_scalar y2);
		state.set( "dot_product_normalised" , &dot_product_normalised );
		extern ma_scalar dot_product_normalised_3d(ma_scalar x1,ma_scalar y1,ma_scalar z1,ma_scalar x2,ma_scalar y2, ma_scalar z2);
		state.set( "dot_product_normalised_3d" , &dot_product_normalised_3d );
		extern ma_scalar lerp(ma_scalar x, ma_scalar y, ma_scalar a);
		state.set( "lerp" , &lerp );
		extern ma_scalar clamp(ma_scalar val, ma_scalar min, ma_scalar max);
		state.set( "clamp" , &clamp );
		extern int random_set_seed(int seed);
		state.set( "random_set_seed" , &random_set_seed );
		extern int random_get_seed();
		state.set( "random_get_seed" , &random_get_seed );
		extern int randomize();
		state.set( "randomize" , &randomize );
		extern int mtrandom_integer(int x);
		state.set( "mtrandom_integer" , &mtrandom_integer );
		extern ma_scalar mtrandom();
		state.set( "mtrandom" , &mtrandom );
		extern int mtrandom_seed(int x);
		state.set( "mtrandom_seed" , &mtrandom_seed );
		extern unsigned int mtrandom32();
		state.set( "mtrandom32" , &mtrandom32 );
		extern void motion_set(int dir, cs_scalar newspeed);
		state.set( "motion_set" , &motion_set );
		extern void motion_add(cs_scalar newdirection, cs_scalar newspeed);
		state.set( "motion_add" , &motion_add );
		extern void move_snap(const cs_scalar hsnap, const cs_scalar vsnap);
		state.set( "move_snap" , &move_snap );
		extern void move_wrap(const bool hor, const bool vert, const cs_scalar margin);
		state.set( "move_wrap" , &move_wrap );
		extern void move_towards_point (const cs_scalar point_x, const cs_scalar point_y, const cs_scalar newspeed);
		state.set( "move_towards_point" , &move_towards_point );
		extern bool place_snapped(int hsnap, int vsnap);
		state.set( "place_snapped" , &place_snapped );
		extern void move_random(const cs_scalar snapHor, const cs_scalar snapVer);
		state.set( "move_random" , &move_random );
		extern bool object_exists(int objid);
		state.set( "object_exists" , &object_exists );
		extern void object_set_depth(int objid, int val);
		state.set( "object_set_depth" , &object_set_depth );
		extern void object_set_mask(int objid, int val);
		state.set( "object_set_mask" , &object_set_mask );
		extern void object_set_persistent(int objid, bool val);
		state.set( "object_set_persistent" , &object_set_persistent );
		extern void object_set_solid(int objid, bool val);
		state.set( "object_set_solid" , &object_set_solid );
		extern void object_set_sprite(int objid, int val);
		state.set( "object_set_sprite" , &object_set_sprite );
		extern void object_set_visible(int objid, bool val);
		state.set( "object_set_visible" , &object_set_visible );
		extern int object_get_depth(int objid);
		state.set( "object_get_depth" , &object_get_depth );
		extern int object_get_mask(int objid);
		state.set( "object_get_mask" , &object_get_mask );
		extern int object_get_parent(int objid);
		state.set( "object_get_parent" , &object_get_parent );
		extern bool object_get_persistent(int objid);
		state.set( "object_get_persistent" , &object_get_persistent );
		extern bool object_get_solid(int objid);
		state.set( "object_get_solid" , &object_get_solid );
		extern int object_get_sprite(int objid);
		state.set( "object_get_sprite" , &object_get_sprite );
		extern bool object_get_visible(int objid);
		state.set( "object_get_visible" , &object_get_visible );
		extern bool object_is_ancestor(int objid, int acid);
		state.set( "object_is_ancestor" , &object_is_ancestor );
		extern int resource_get_id(string name);
		state.set( "resource_get_id" , &resource_get_id );
		extern bool script_exists(int script);
		state.set( "script_exists" , &script_exists );
		extern string object_get_name(int i);
		state.set( "object_get_name" , &object_get_name );
		extern string sprite_get_name(int i);
		state.set( "sprite_get_name" , &sprite_get_name );
		extern string background_get_name(int i);
		state.set( "background_get_name" , &background_get_name );
		extern string font_get_name(int i);
		state.set( "font_get_name" , &font_get_name );
		extern string timeline_get_name(int i);
		state.set( "timeline_get_name" , &timeline_get_name );
		extern string path_get_name(int i);
		state.set( "path_get_name" , &path_get_name );
		extern string sound_get_name(int i);
		state.set( "sound_get_name" , &sound_get_name );
		extern string script_get_name(int i);
		state.set( "script_get_name" , &script_get_name );
		extern string shader_get_name(int i);
		state.set( "shader_get_name" , &shader_get_name );
		extern int room_goto(int roomind);
		state.set( "room_goto" , &room_goto );
		extern int room_restart();
		state.set( "room_restart" , &room_restart );
		extern string room_get_name(int index);
		state.set( "room_get_name" , &room_get_name );
		extern int room_goto_absolute(int index);
		state.set( "room_goto_absolute" , &room_goto_absolute );
		extern int room_goto_previous();
		state.set( "room_goto_previous" , &room_goto_previous );
		extern int room_goto_next();
		state.set( "room_goto_next" , &room_goto_next );
		extern int room_next(int num);
		state.set( "room_next" , &room_next );
		extern int room_previous(int num);
		state.set( "room_previous" , &room_previous );
		extern bool room_exists(int roomid);
		state.set( "room_exists" , &room_exists );
		extern int room_set_width(int indx, int wid);
		state.set( "room_set_width" , &room_set_width );
		extern int room_set_height(int indx, int hei);
		state.set( "room_set_height" , &room_set_height );
		extern int room_set_view(int indx, int vind, int vis, int xview, int yview, int wview, int hview, int xport, int yport, int wport, int hport, int hborder, int vborder, int hspeed, int vspeed, int obj);
		state.set( "room_set_view" , &room_set_view );
		extern int room_set_background_color(int indx, int col, bool show);
		state.set( "room_set_background_color" , &room_set_background_color );
		extern int room_set_caption(int indx, string str);
		state.set( "room_set_caption" , &room_set_caption );
		extern int room_set_persistent(int indx, bool pers);
		state.set( "room_set_persistent" , &room_set_persistent );
		extern int room_set_view_enabled(int indx, int val);
		state.set( "room_set_view_enabled" , &room_set_view_enabled );
		extern int room_tile_clear(int indx);
		state.set( "room_tile_clear" , &room_tile_clear );
		extern int room_instance_add(int indx, int x, int y, int obj);
		state.set( "room_instance_add" , &room_instance_add );
		extern int room_instance_clear(int indx);
		state.set( "room_instance_clear" , &room_instance_clear );
		extern int room_add();
		state.set( "room_add" , &room_add );
		extern int view_set(int vind, int vis, int xview, int yview, int wview, int hview, int xport, int yport, int wport, int hport, int hborder, int vborder, int hspeed, int vspeed, int obj);
		state.set( "view_set" , &view_set );
		extern int window_views_mouse_get_x();
		state.set( "window_views_mouse_get_x" , &window_views_mouse_get_x );
		extern int window_views_mouse_get_y();
		state.set( "window_views_mouse_get_y" , &window_views_mouse_get_y );
		extern void window_views_mouse_set(int x, int y);
		state.set( "window_views_mouse_set" , &window_views_mouse_set );
		extern int room_count();
		state.set( "room_count" , &room_count );
		extern bool sprite_exists(int spr);
		state.set( "sprite_exists" , &sprite_exists );
		extern void sprite_save(int ind, unsigned subimg, std::string fname);
		state.set( "sprite_save" , &sprite_save );
		extern void sprite_save_strip(int ind, std::string fname);
		state.set( "sprite_save_strip" , &sprite_save_strip );
		extern int sprite_duplicate(int ind);
		state.set( "sprite_duplicate" , &sprite_duplicate );
		extern void sprite_merge(int ind, int copy_sprite);
		state.set( "sprite_merge" , &sprite_merge );
		extern void sprite_set_offset(int ind, int xoff, int yoff);
		state.set( "sprite_set_offset" , &sprite_set_offset );
		extern void sprite_set_bbox_mode(int ind, int mode);
		state.set( "sprite_set_bbox_mode" , &sprite_set_bbox_mode );
		extern void sprite_set_bbox(int ind, int left, int top, int right, int bottom);
		state.set( "sprite_set_bbox" , &sprite_set_bbox );
		extern void sprite_set_precise(int ind, bool precise);
		state.set( "sprite_set_precise" , &sprite_set_precise );
		extern void sprite_collision_mask(int ind, bool sepmasks, int mode, int left, int right, int top, int bottom, int kind, unsigned char tolerance);
		state.set( "sprite_collision_mask" , &sprite_collision_mask );
		extern void cons_show_message(string message);
		state.set( "cons_show_message" , &cons_show_message );
		extern void cons_print_overwritable(string message);
		state.set( "cons_print_overwritable" , &cons_print_overwritable );
		extern void show_debug_message(string message);
		state.set( "show_debug_message" , &show_debug_message );
		extern char cons_get_byte();
		state.set( "cons_get_byte" , &cons_get_byte );
		extern string cons_get_char();
		state.set( "cons_get_char" , &cons_get_char );
		extern string cons_get_string();
		state.set( "cons_get_string" , &cons_get_string );
		extern int show_message(string str);
		state.set( "show_message" , &show_message );
		/*extern void splash_show_video(string fname, bool loop);
		state.set( "splash_show_video" , &splash_show_video );
		extern void splash_show_text(string fname, long delay);
		state.set( "splash_show_text" , &splash_show_text );
		extern void splash_show_image(string fname, long delay);
		state.set( "splash_show_image" , &splash_show_image );
		extern void splash_show_web(string url, long delay);
		state.set( "splash_show_web" , &splash_show_web );
		extern void splash_set_main(bool main);
		state.set( "splash_set_main" , &splash_set_main );
		extern void splash_set_scale(bool scale);
		state.set( "splash_set_scale" , &splash_set_scale );
		extern void splash_set_cursor(bool visible);
		state.set( "splash_set_cursor" , &splash_set_cursor );
		extern void splash_set_color(int col);
		state.set( "splash_set_color" , &splash_set_color );
		extern void splash_set_caption(string cap);
		state.set( "splash_set_caption" , &splash_set_caption );
		extern void splash_set_fullscreen(bool full);
		state.set( "splash_set_fullscreen" , &splash_set_fullscreen );
		extern void splash_set_border(bool border);
		state.set( "splash_set_border" , &splash_set_border );
		extern void splash_set_size(unsigned width, unsigned height);
		state.set( "splash_set_size" , &splash_set_size );
		extern void splash_set_position(int x, int y);
		state.set( "splash_set_position" , &splash_set_position );
		extern void splash_set_adapt(bool adapt);
		state.set( "splash_set_adapt" , &splash_set_adapt );
		extern void splash_set_top(bool top);
		state.set( "splash_set_top" , &splash_set_top );
		extern void splash_set_interrupt(bool interrupt);
		state.set( "splash_set_interrupt" , &splash_set_interrupt );
		extern void splash_set_stop_key(bool stop);
		state.set( "splash_set_stop_key" , &splash_set_stop_key );
		extern void splash_set_stop_mouse(bool stop);
		state.set( "splash_set_stop_mouse" , &splash_set_stop_mouse );
		extern void splash_set_close_button(bool show);
		state.set( "splash_set_close_button" , &splash_set_close_button );*/
		path = filepath;
		return;
	}
	void lua_stop(){
		path = "";
		return;
	}
	void lua_add_var(string name, int var){
		if(state.getState() == nullptr){
			show_error("Lua was not initialized!", false);
		}
		if(path == ""){
			show_error("Lua path is empty!",true);
		}
		const char *cname = name.c_str();
		state.set(cname, var);
		return;
	}
	void lua_add_var(string name, string var){
		if(state.getState() == nullptr){
			show_error("Lua was not initialized!", false);
		}
		if(path == ""){
			show_error("Lua path is empty!",true);
		}
		const char *cname = name.c_str();
		state.set(cname, var);
		return;
	}
	int lua_get_int(string name){
		if(state.getState() == nullptr){
			show_error("Lua was not initialized!", false);
		}
		if(path == ""){
			show_error("Lua path is empty!",true);
		}
		const char *cname = name.c_str();
		int returner = state[cname];
		return returner;
	}
	string lua_get_string(string name){
		if(state.getState() == nullptr){
			show_error("Lua was not initialized!", false);
		}
		if(path == ""){
			show_error("Lua path is empty!",true);
		}
		const char *cname = name.c_str();
		string returner = state[cname];
		return returner;
	}
	void lua_execute_file(){
		if(state.getState() == nullptr){
			show_error("Lua was not initialized!", false);
		}
		if(path == ""){
			show_error("Lua path is empty!",true);
		}
		try {
		state.doFile(path); //Executes the Lua File
		} catch(lua::LoadError er){
			show_error(er.what(), false);
		} catch(lua::RuntimeError er){
			show_error(er.what(), false);
		}
		return;
	}
}